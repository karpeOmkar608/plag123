SolutionsEducative Enterprise Enablement platformDevelopersLearn new technologiesProductsCourses for EnterpriseSupercharge your engineering teamCourses for IndividualsWorld class coursesOnboardingOnboard new hires fasterAssessmentsMeasure your SkillScorePersonalized PathsPersonalized Paths for your goalsProjectsBuild real world applicationsAnswersTrusted Answers to Developer QuestionsPricingFor EnterpriseTailored for your teamFor IndividualsStay ahead of the curveSearchSearchCoursesLog InJoin for freeSolutionsEducative Enterprise Enablement platformDevelopersLearn new technologiesProductsCourses for EnterpriseSupercharge your engineering teamCourses for IndividualsWorld class coursesOnboardingOnboard new hires fasterAssessmentsMeasure your SkillScorePersonalized PathsPersonalized Paths for your goalsProjectsBuild real world applicationsAnswersTrusted Answers to Developer QuestionsPricingFor EnterpriseTailored for your teamFor IndividualsStay ahead of the curveSearchSearchCoursesLog InJoin for freeTrusted answers to developer questionsTrusted Answers to Developer QuestionsRelated Tagsweb designjavascriptHow to add a page loader to a web page NDUKWE CHIDERA K. Free System Design Interview CourseGet Educative's definitive System Design Interview Handbook for free.
Get Free Course
Introduction
A page loader is the display that is visible to the user of a website while the web page loads to the browser. If there is no page loader and the page takes a longer time to load than usual, the users of the site will be left with a blank white page.
This can be changed with a page loader, <div>, that you have designed to fit your needs.

How to create a page loader
To create a page loader, you simply need to:

Create your HTML code to indicate what you want to use as your loader, e.g., an image or an icon.
Then, style your loader page to your taste. One of the common choices among designers is to animate their loaders.
Finally, create a JavaScript script that will fire up when the page is requested and then execute the code it contains. In this case, the code will check if the page is not loaded and then display the loader if so.

Below is a sample page loader code.
Code
Try to click the run button multiple times to see the page loader effect.
OutputJavaScriptHTMLCSS (SCSS)Run
Explanation
We create and style a loader, as well as the page to be displayed.
In JavaScript, when document.readyState changes, a readystatechange event happens and our function executes. This function holds that if the document is not yet loaded, then the body should remain hidden from the user, and only the loader should be visible.
Once the page has completely loaded, the loader is immediately set to display:none, and the body is made visible.
If the page doesn’t load quickly enough, the spinner below (which is our loader) will be visible. Due to how fast the page in the previous code loads, you can only see the loader for a short time.
OutputJavaScriptHTMLCSS (SCSS)RunRELATED TAGSweb designjavascriptCONTRIBUTORNDUKWE CHIDERA K.License: Creative Commons-Attribution-ShareAlike 4.0 (CC-BY-SA 4.0) Free System Design Interview CourseGet Educative's definitive System Design Interview Handbook for free.
Get Free CourseKeep ExploringRelated CoursesLearn in-demand tech skills in half the timeSOLUTIONSFor EnterpriseFor IndividualsFor HR & RecruitingFor BootcampsPRODUCTSEducative LearningEducative OnboardingEducative Skill AssessmentsEducative ProjectsPricingFor EnterpriseFor IndividualsFree TrialLEGALPrivacy PolicyCookie SettingsTerms of ServiceBusiness Terms of ServiceCONTRIBUTEBecome an AuthorBecome an AffiliateBecome a ContributorRESOURCESEducative BlogEM HubEducative SessionsEducative AnswersABOUT USOur TeamCareersHiringFrequently Asked QuestionsContact UsPressMOREGitHub Students ScholarshipCourse CatalogEarly Access CoursesEarn Referral CreditsCodingInterview.comCopyright ©2023 Educative, Inc. All rights reserved.













Blog

DevProduct ManagementUX Design
PodcastMeetups 




Sign In
Start monitoring for free













Share 
























Reply 


0












 



Sharvari Raut Follow
Computer Vision | Data Science | Technical Writer | AI Developer | Deep Learning | Developer


How to build animated page loaders in CSS



December 10, 2021 

4 min read
1252



 
Animated page loaders help users to be patient with a tool or website. It lets them know that the system has not crashed, tells them how long it will take to load the page, and keeps their attention by providing something entertaining that they can look at. The best part? It is easy to create downloadable animations in CSS with some basic web design skills.
It is common to see animated loaders on sites these days, especially as React web applications and websites grow. It is one of the many ways we can improve the perceived performance of an app, or in other words, make it seem like the site is loading faster than it is.
In this article, I will discuss the benefits of animated page loaders, then build a simple spinning wheel with CSS that you can use as a jumping-off point for building more complex and informative loaders.
What are page loaders?
A page loader is a web page component that provides a loading page overlay when you press a link or button. You can add different types of page loaders like spinners, loading bars, and hourglass animations.
Page loaders also function as notifications that assure users that the system is still in the process of handling their request. Animated page loaders are usually simple animations designed to entertain guests while the server is undergoing processing.
They are essential elements of a web page that should not be ignored in the development process, because if a user has to wonder whether their request is being processed, they will become frustrated.
Why should one use page loaders on their website?
Inevitably, certain elements on a website or app will require loading time. No one enjoys waiting, so you have to keep your users engaged in those milliseconds.
Page loaders are integral to perceived performance, or how long it feels like something is loading, regardless of the actual wait time. This is because they provide a small distraction for the user while they wait, which makes it feel like the time is going faster.
Page loaders also can indicate a reason why users are being required to wait. This can reduce frustration because it gives your users an understandable reason for the inconvenience. You do not have to be overly precise, but simple statements such as, “please wait while we load your content” or “we are working on downloading your document” work well.
Finally, page loaders can reduce user frustration by estimating how much time there is left to wait. Time management sets expectations and helps users to wait patiently. You can display this rating as a percentage or as a visible representation of progress.








Over 200k developers use LogRocket to create better digital experiences
Learn more →




Why is CSS the best option for page loaders?
There are several reasons why one should use CSS while creating page loaders.
First, it is easily editable. You can quickly adjust the timing, color, speed, and other animation features.
Second, animation is faster and smoother with CSS than with, for example, JavaScript. This is because CSS offloads animation logic to the browser, whereas JavaScript animation speeds depend on the library being used along with it.
Creating a basic animated page loader with CSS
While it can be pretty tempting to build the fanciest and coolest looking page loaders, we can do a pretty good job with only using CSS. In this tutorial, we will be building this spinning circle page loader.
Let’s get started. In the HTML file, add a div and name the class name as "loader":
<html>
<body>
  <div class="loader"></div>
 </body>
</html>

Now, use the CSS class selector .loader to design your CSS loader animation. You can define multiple properties, like color, size, and alignment:
body{
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: white;
}

.loader{
  width: 100px;
  height: 100px;
  border-radius: 100px;
  border-top: 5px solid red;
  border-left: 3px solid brown;
  border-bottom: 1px solid purple;
  border-right: transparent;
  animation: spinner 0.8s linear infinite;
}

In the code above, we are giving the height and width of the loaders as 100px. Because we are making a circular spinner, the border-radius is 100px.
The border-top, border-bottom, and border-left properties determine the size, style, and color of our loader.
Setting the border-bottom property will create a separate, spinning, ribbon-like animation. Changing the border-right or -left properties will change the length and size of the ribbon.
We finally have the animation of our loader, which determines the name, duration, timing, and iteration of our loader. In our example, the spinner animation is made so that it moves at the same speed from start to end for 0.8s in each loop indefinitely:
> animation: spinner 0.8s linear infinite;

The last thing to do is set your animation’s keyframes. These will show how the loader will render at a given time during the animation sequence:
@keyframes spinner{
  0%{
    transform: rotate(0deg);
  }


  100%{
    transform: rotate(360deg);
  }
}

There are two keyframes defined in our example. The first occurs at 0%, which is the first part of the animation sequence. The loader is then set to be rotated zero degrees.

More great articles from LogRocket:

Don't miss a moment with The Replay, a curated newsletter from LogRocket
Learn how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app

Use React's useEffect to optimize your application's performance
Switch between multiple versions of Node
Discover how to animate your React app with AnimXYZ
Explore Tauri, a new framework for building binaries
Compare NestJS vs. Express.js


The second keyframe occurs at 100%, which is the last part of the animation sequence.
The loader is then set to be rotated 360 degrees so that the animation of the spinner starts at the top of the circle and completes a full rotation to make a circle for 0.8s.
Congratulations! You now know how to build a simple but excellent loading effect page loader using nothing but HTML and CSS.
Further examples of page loaders
Showing duration
Duration loading animations determine how much time it will take for the page to load or fetch the request. These may offer a specific percentage, loading time, or number. They can also be represented visually, like a circle being completed or a bar filling up.
See the Pen 
CSS loading bar by Sharvari Raut (@sharur7)
on CodePen.

Endless animation
Endless animation is an example of an indeterminate indicator. It asks the user to wait without indicating for how long. They can be used when the waiting period is unknown or very short.
See the Pen 
Loader Infinite Animation by Sharvari Raut (@sharur7)
on CodePen.

Custom animations
Fun animations are generally SVG loaders directly added to websites. These animations are sometimes challenging to build using just CSS. These loaders attract the user’s attention and make their waiting time more comfortable.
Some JavaScript libraries help build these animations quickly, such as p5.js, GraphicsJS, D3.js, and many more.
See the Pen 
Fun Loader by Sharvari Raut (@sharur7)
on CodePen.

Reason waiting loaders
Some loaders let us know the reason for waiting with a bit of text. These are effective at keeping users on our site. For example, loaders can tell you which step the process is on, like “fetching data,” “connecting to peers,” and “deleting files.” This information helps to communicate with the user and get a proper level of understanding.
See the Pen 
Calculating Results Clock Loader by Sharvari Raut (@sharur7)
on CodePen.

Conclusion
When designing a website, you should take all UI details into account. Having a good website does not help if the loading time is too long and half of the users leave even before they get a chance to see your site.
To prevent that from happening, you should add interesting animated loaders to your website to keep the user’s attention as long as necessary until all the content is loaded. Add creative and design a funny waiting gif that every user can enjoy seeing!
Is your frontend hogging your users' CPU?As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, try LogRocket.https://logrocket.com/signup/LogRocket is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.Modernize how you debug web and mobile apps — Start monitoring for free.

Share this:TwitterRedditLinkedInFacebook





 


Sharvari Raut Follow
Computer Vision | Data Science | Technical Writer | AI Developer | Deep Learning | Developer




Uncategorized 
#css 


« Configuring the Go HTTP client
A guide to React forms and events using Formik »












Top 6 tools for Node.js monitoring





 



Pascal Akunne
Mar 17, 2023

6 min read







 








A guide to using act with GitHub Actions





 



Andrew Evans
Mar 17, 2023

7 min read







 








Android CI/CD using GitHub Actions





 



Ivan Garza
Mar 16, 2023

8 min read







 










Leave a Reply Cancel reply












 








SearchSearch 






 































































 Skip to Main Content





Click here to return to Amazon Web Services homepage



Contact Us
 Support  
English 
My Account 




 Sign In


  Create an AWS Account 









Products
Solutions
Pricing
Documentation
Learn
Partner Network
AWS Marketplace
Customer Enablement
Events
Explore More 

















 Close 



عربي
Bahasa Indonesia
Deutsch
English
Español
Français
Italiano
Português




Tiếng Việt
Türkçe
Ρусский
ไทย
日本語
한국어
中文 (简体)
中文 (繁體)





 Close 

My Profile
Sign out of AWS Builder ID
AWS Management Console
Account Settings
Billing & Cost Management
Security Credentials
AWS Personal Health Dashboard



 Close 

Support Center
Knowledge Center
AWS Support Overview
AWS re:Post












Click here to return to Amazon Web Services homepage







  Get Started for Free 


  Contact Us 












 Products 
 Solutions 
 Pricing 
 Introduction to AWS 
 Getting Started 
 Documentation 
 Training and Certification 
 Developer Center 
 Customer Success 
 Partner Network 
 AWS Marketplace 
 Support 
 AWS re:Post 
 Log into Console 
 Download the Mobile App 









 Blog Home
 Topics  
 Edition  





 Close 



 Architecture
 AWS Cloud Operations & Migrations
 AWS for Games
 AWS Marketplace
 AWS News
 AWS Partner Network
 AWS Smart Business
 Big Data
 Business Productivity
 Cloud Enterprise Strategy
 Cloud Financial Management
 Compute
 Contact Center
 Containers
 Database
 Desktop & Application Streaming
 Developer Tools
 DevOps
 Front-End Web & Mobile
 HPC




 Industries
 Integration & Automation
 Internet of Things
 Machine Learning
 Media
 Messaging & Targeting
 Microsoft Workloads on AWS
 Networking & Content Delivery
 Open Source
 Public Sector
 Quantum Computing
 Robotics
 SAP
 Security
 Spatial Computing
 Startups
 Storage
 Supply Chain & Logistics
 Training & Certification





 Close 

中国版
Édition Française
Deutsche Edition
日本版
한국 에디션
Edição em Português
Edición en Español
English Edition
Версия на русском
Edisi Bahasa Indonesia
Türkçe Sürüm






Front-End Web & Mobile



What happens when you type a URL into your browser?

        by 
       Kyle Lee | on 
       26 AUG 2021 | in 
       Thought Leadership | 
       Permalink | 
        Comments | 
        Share


  
  
  
  





This article was written by Jenna Pederson.
Every day you open up your browser and navigate to your favorite websites — whether it be social media, news, or e-commerce sites. You go to this page by typing in a url or clicking on a link to the page. Have you ever thought about what happens behind the scenes? How does the news get to you when you press enter after typing in the URL? How did the images on this post show up in your browser? How does your Twitter feed and the tweet data show up in your browser securely?
In this post, we’ll look at what happens when you type a URL into your browser and press enter. End to end, the process involves the browser, your computer’s operating system, your internet service provider, the server where you host the site, and services running on that server. It’s important to understand where things can go wrong, where to look for performance issues, and ensure you’re offering a secure experience for your users.
First, we’ll take a look at the relationship between websites, servers, and IP addresses. Then, we’ll go through the steps your browser takes to:

look up the location of the server hosting the website
make the connection to the server
send a request to get the specific page
handle the response from the server and
how it renders the page so you, the viewer, can interact with the website

Websites, servers, IP addresses, oh my!
Websites are collections of files, often HTML, CSS, Javascript, and images, that tell your browser how to display the site, images, and data. They need to be accessible to anyone from anywhere at anytime, so hosting them on your computer at home isn’t be scalable or reliable. A powerful external computer connected to the Internet, called a server, stores these files.
When you point your browser at a URL like https://jennapederson.dev/hello-world, your browser has to figure out which server on the Internet is hosting the site. It does this by looking up the domain, jennapederson.dev, to find the address.
Each device on the Internet — servers, cell phones, your smart refrigerator — all have a unique address called an IP address. An IP address contains four numbered parts:
203.0.113.0
But numbers like this are hard to remember! That’s where domain names come in. jennapederson.dev is much easier to remember than 203.0.113.0, right? Imagine having to remember all the phone numbers of your contacts without having the Contacts app on your phone. Your Contacts app lets you look up phone numbers by name.
We do the same on the Internet. The domain name system, or DNS, is like the Contacts app on our phone. DNS helps our browser (and us) find servers on the Internet. We can do a DNS lookup to find the IP address of the server based on the domain name, jennapederson.dev. You can read more about DNS here.
Now that you know about the different parts and how they relate to one another, let’s look at each step of the process and how the browser communicates with the server when you type in a URL. Whether you typed in a URL or clicked on a linked URL from the current page, the process is the same.
The process
To show how all these steps fit together, I’m going to use an Amazon Lightsail instance and a Lightsail DNS zone. I’m using Lightsail because it’s one of the simplest services to manage virtual private servers (VPS) and DNS in one place, but these concepts work for any VPS and DNS service.
1. You type https://jennapederson.dev/hello-world in your browser and press Enter
Let’s break down the parts of this URL you typed in to get here.
https://jennapederson.dev/hello-world
Scheme
https:// is the scheme. HTTPS stands for Hypertext Transfer Protocol Secure. This scheme tells the browser to make a connection to the server using Transport Layer Security, or TLS. TLS is an encryption protocol to secure communications over the Internet. With HTTPS, the data exchanged between your browser and the server, like passwords or credit card info, is encrypted. You may have also seen ftp://, mailto://, or file://. These are other protocols that browsers know how to handle.
Domain
jennapederson.dev is the domain name of the site. It is the memorable address and points to a specific server’s IP address. If you look at the Lightsail DNS zone below, you can see a DNS A record pointing to the Lightsail instance, jennapedersondev-static-ip, which represents the static IP address of the Lightsail instance.

Path
Sometimes there is an additional path to the resource in the URL. For example, for this URL, https://jennapederson.dev/the-path-to/hello-world, the-path-to is the path on the server to the requested resource, hello-world. You can think of this like the directory structure of files and other directories on your computer. It’s a way to organize your resources, whether they are static HTML, CSS, Javascript, or image files, or dynamically generated content. Common examples of paths are blog, posts, tags, or images, each grouping different resources.
Resource
When you typed this URL into your browser, hello-world is the name of the resource on the website you want to view. Sometimes you’ll see this with a file extension like .html which indicates this is a static file on the server with HTML content. Without an extension, like this URL, it usually indicates the server generated this content. For instance, a news site would show you customized, up to date, and local news content, which it can only do when it knows who you are or where the request came from.
2. Browser looks up IP address for the domain
After you’ve typed the URL into your browser and pressed enter, the browser needs to figure out which server on the Internet to connect to. To do that, it needs to look up the IP address of the server hosting the website using the domain you typed in. It does this using a DNS lookup. We’ll go over the DNS lookup process at a high-level, but it is a complex topic beyond the scope of this post. You can read more about how DNS works here.
Because DNS is complex and has to be blazingly fast, DNS data is cached at different layers between your browser and at various places across the Internet. Your browser checks its own cache, the operating system cache, a local network cache at your router, and a DNS server cache on your corporate network or at your internet service provider (ISP). If the browser cannot find the IP address at any of those cache layers, the DNS server on your corporate network or at your ISP does a recursive DNS lookup. A recursive DNS lookup asks multiple DNS servers around the Internet, which in turn ask more DNS servers for the DNS record until it is found.
Once the browser gets the DNS record with the IP address, it’s time for it to find the server on the Internet and establish a connection.
3. Browser initiates TCP connection with the server
Using the public Internet routing infrastructure, packets from a client browser request get routed through the router, the ISP, through an internet exchange to switch ISPs or networks, all using transmission control protocol, more commonly known as TCP, to find the server with the IP address to connect to. But this is a very roundabout way to get there and it’s not efficient.
Instead, many sites use a content delivery network, or CDN, to cache static and dynamic content closer to the browser. In our example, I’ve set the Lightsail instance, jennapedersondev, as an origin for a CDN distribution.

A CDN is a globally distributed network of caching servers that improve the performance of your site or app (the origin) by bringing the content closer to your users. The Lightsail CDN uses CloudFront, which is part of the AWS global network. Requests from the client browser get to take advantage of this private network that has ultra-low latency and high availability. To track the hops the request takes from my computer to jennapederson.dev, we can use traceroute. In the image below, the first hop (the first row) is to my router. Hops in box one are on my ISP’s network and hops in box two are on the AWS global network.

Instead of relying on the public internet routing infrastructure and being subject to extra hops, redeliveries, and packet loss, the client browser request gets to take a ride on the AWS global network. The request is intelligently routed through the most performant location to deliver content to your browser.
Once the browser finds the server on the Internet, it establishes a TCP connection with the server and if HTTPS is being used, a TLS handshake takes place to secure the communication. TCP and and TLS are extremely important topics, but we’ll cover them in another post.
In image the below, this connection (Initial connection) took 130.30ms.

Once the browser has established a connection with the server, the next step is to send the HTTP request to get the resource, or the page.
4. Browser sends the HTTP request to the server
Now that the browser has a connection to the server, it follows the rules of communication for the HTTP(s) protocol. It starts with the browser sending an HTTP request to the server to request the contents of the page. The HTTP request contains a request line, headers (or metadata about the request), and a body. The request line contains information that the server can use to determine what the client (in this case, your browser) wants to do.
The request line contains the following:

a request method, which is one of GET, POST, PUT, PATCH, DELETE, or a handful of other HTTP verbs
the path, pointing to the requested resources
the HTTP version to communicate with

The request line for the URL request looks like this:
GET /hello-world HTTP/1.1
The request line tells the server that you want to GET resource at /hello-world and to communicate with HTTP/1.1.
Remember that HTTP verbs express the semantic intent of your request. You could also use the POST, PUT, or PATCH methods to send data to the server for storage, either to create new data or update existing data at the request path. The DELETE method would delete the resource at the given path. However, it’s important to know that servers don’t have to support all verbs. A server could respond with a 200 OK status to a DELETE method and not do anything with the resource. The next part of the request is the request headers. Headers pass extra information along from the client that help route the request, indicate what type of client is making the request (the user agent), and can be used for supporting A/B testing, blue/green deployments, and canary deployments. Headers are key-value pairs like this:
Host: jennapederson.dev
User-Agent: curl/7.64.1
Accept: */*
The last part of the request is the body. The body is (usually) empty for a GET request like ours. For a request that manipulates resources, like POST, PUT, or PATCH, the body will contain the data from the client to create or update. The request body can be in different formats and the server understands the format based on a request header, Content-Type. Here’s an example of the full request for the URL, with the request line and headers (no body since this is a GET):
GET /hello-world/ HTTP/1.1
Host: jennapederson.dev
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache
sec-ch-ua: " Not A;Brand";v="99", "Chromium";v="90", "Google Chrome";v="90"
sec-ch-ua-mobile: ?0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Referer: <https://jennapederson.dev/>
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
dnt: 1
sec-gpc: 1
Once the server has received the request from the client, the server processes it and sends back a response.
5. Server processes request and sends back a response
The server takes the request and based on the info in the request line, headers, and body, decides how to process the request. For the request, GET /hello-world/ HTTP/1.1, the server gets the content at this path, constructs the response and sends it back to the client. The response contains the following:

a status line, telling the client the status of the request
response headers, telling the browser how to handle the response
the requested resource at that path, either content like HTML, CSS, Javascript, or image files, or data

The status line contains both the HTTP version and a numeric and text representation of the status of the request. The response looks like this:
HTTP/1.1 200 OK
Date: Tue, 25 May 2021 19:40:59 GMT
Server: Apache
X-Frame-Options: SAMEORIGIN
X-Powered-By: Express
Cache-Control: max-age=0, no-cache
Content-Type: text/html; charset=utf-8
Vary: Accept-Encoding
X-Mod-Pagespeed: 1.13.35.2-0
Content-Encoding: br
Keep-Alive: timeout=1, max=100
Connection: Keep-Alive
Transfer-Encoding: chunked

<!DOCTYPE html>
<html lang="en">
<head>
    THE REST OF THE HTML
The browser considers a status code in the 200s to be successful. The response was 200, so the browser knows to render the response. Resources can be static files, either text (i.e index.html) or non-text data (i.e. logo.img). Browsers aren’t always requesting static files, though. Often, these are dynamic resources generated at the time of the request and there is no file associated with the resource. In fact, in this request, that’s exactly what is happening. There is no file hello-world, but the server still knows how to process the request. The server generates a dynamic resource, building the HTML from fragments or templates and combining it with dynamic data to send back in the response, as text, so the browser can render the page. Now that you know how the server builds the response to send back to the browser, let’s take a look at how the browser handles the response.
6. Browser renders the content
Once the browser has received the response from the server, it inspects the response headers for information on how to render the resource. The Content-Type header above tells the browser it received an HTML resource in the response body. Lucky for us, the browser knows what to do with HTML! The first GET request returns HTML, the structure of the page. But if you inspect the HTML of the page (or any web page) with your browser’s dev tools, you’ll see it references other Javascript, CSS, image resources and requests additional data in order to render the web page as designed. As the browser is parsing and rendering the HTML, it is making additional requests to get Javascript, CSS, images, and data. It can do much of this in parallel, but not always and that’s a story for a different post.

In the image above, you can see the HTML references a CSS resource. The browser makes a subsequent request to the server to get this CSS resource to style the page. The Content-Type header of the request for the CSS resource tells the browser to render CSS. If the browser requests an image resource, the Content-Type header tells the browser it is non-text data and to render it accordingly.
Wrapping Up
You did it! You traced a URL request from the browser all the way to the server hosting it and it’s response back to the browser to be rendered. We covered the relationship between websites, servers, IP addresses and stepped through each of the steps that your browser goes through when you type a URL into your browser and press enter. For review, here are those six steps:

You type a URL in your browser and press Enter
Browser looks up IP address for the domain
Browser initiates TCP connection with the server
Browser sends the HTTP request to the server
Server processes request and sends back a response
Browser renders the content

Knowing what happens when you type a URL into your browser can help you figure out where things go wrong, where to look for performance issues with your website, and to offer a secure experience for your users.
If you’d like to try this out for yourself, you can build your own virtual private server, setup a CDN, and manage domains with Amazon Lightsail. Get started now with this tutorial and check out the latest pricing promotion so you can get started even quicker.




         TAGS: 
        Amazon Lightsail, CDN



Comments

View Comments








 Resources

 AWS AppSync
 AWS Device Farm
 Amazon Pinpoint
 AWS Amplify










 Follow

  AWS for Mobile
  Facebook
  LinkedIn
  Twitch
  Email Updates













  Sign In to the Console 

 Learn About AWS

What Is AWS?
What Is Cloud Computing?
AWS Diversity, Equity & Inclusion
What Is DevOps?
What Is a Container?
What Is a Data Lake?
AWS Cloud Security
What's New
Blogs
Press Releases



 Resources for AWS

Getting Started
Training and Certification
AWS Solutions Library
Architecture Center
Product and Technical FAQs
Analyst Reports
AWS Partners



 Developers on AWS

Developer Center
SDKs & Tools
.NET on AWS
Python on AWS
Java on AWS
PHP on AWS
JavaScript on AWS



 Help

Contact Us
File a Support Ticket
Knowledge Center
AWS re:Post
AWS Support Overview
Legal
AWS Careers







  Create an AWS Account 





 


 


 


 


 


 





          Amazon is an Equal Opportunity Employer: 
          Minority / Women / Disability / Veteran / Gender Identity / Sexual Orientation / Age.









Language
عربي
Bahasa Indonesia
Deutsch
English
Español
Français
Italiano
Português
Tiếng Việt
Türkçe
Ρусский
ไทย
日本語
한국어
中文 (简体)
中文 (繁體)








Privacy
|
Site Terms
|
 Cookie Preferences 
|
© 2023, Amazon Web Services, Inc. or its affiliates. All rights reserved.






























Will Web 3.0 Replace Web 2.0?










Become a member
Login





 




                    No unread comment.





View All Comments



 




                    No unread message.





View All Messages


 



No unread notification.







View All Notifications


 







C# Corner





Post


An Article


A Blog


A News


A Video


An EBook


An Interview Question





Ask Question














 
TECHNOLOGIES 
ANSWERSLEARNNEWSBLOGSVIDEOSINTERVIEW PREPBOOKSEVENTSTrainingLiveJOBSMORECAREERMEMBERS



















Display Loading Image When Page Loads Using jQuery








Manas Mohapatra



Aug 16, 2016





98k

0



1












facebook
twitter
linkedIn
Reddit
WhatsApp
Email
Bookmark








How to display loading image when page loads using jQuery











Introduction
 

Often we build build web applications and due to some reason it takes more time to load the page. At the time of loading page, it shows blank(white page) in UI to User. Some Users seeing delay in page load, close the browser because they are not able to see anything. In order to avoid this, browser will say page is loading please wait. Here we will discuss how can we accomplish.
 

Using Code
 

Step 1: Add loader DIV tag inside body tag. This DIV helps to display the message. 




<div id="loader"></div>  


Step 2: Add following CSS how it is going to displaying in browser.




#loader {  
    position: fixed;  
    left: 0px;  
    top: 0px;  
    width: 100%;  
    height: 100%;  
    z-index: 9999;  
    background: url('pageloader.gif') 50% 50% no-repeat rgb(249,249,249);  
}  




Step 3: Add following jQuery code when to fadeout loading image when page loads. First code block is to add jQuery reference and second code block to fade out the div in browser once everything loaded properly. 




<script src="http://code.jquery.com/jquery-1.8.2.js"></script> 


<script type="text/javascript">  
   $(window).load(function() {  
      $("#loader").fadeOut(1000);  
   });
</script>  



Note: To get complete code download the attached zip file.
 
Conclusion
 

We discussed how can we show loading image when page takes more time to load. Hope this helps.








                Next Recommended Reading
                How To Display Browser Notifications From Web Application Using jQuery

























































About Us
Contact Us
Privacy Policy
Terms
Media Kit
Sitemap
Report a Bug
FAQ
Partners


C# Tutorials
Common Interview Questions
Stories
Consultants
Ideas
Certifications

©2023 C# Corner. All contents are copyright of their authors. 






































Stack Overflow



About



						Products
					


For Teams







Stack Overflow
Public questions & answers




Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers




Talent

								Build your employer brand
							




Advertising
Reach developers & technologists worldwide



About the company











Loading…














current community
















            Stack Overflow
        



help
chat









            Meta Stack Overflow
        






your communities            



Sign up or log in to customize your list.                


more stack exchange communities

company blog








Log in

Sign up














                    Home
                





Public


 Questions






                    Tags
                







                    Users
                







                    Companies
                





Collectives









 Explore Collectives







Teams

Stack Overflow for Teams
        – Start collaborating and sharing organizational knowledge.
        
        
Create a free Team
Why Teams?



Teams
















                            Create free Team
                        












Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.

                    Learn more about Collectives
                





Teams
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.

                    Learn more about Teams
                











How to show Page Loading div until the page has finished loading?


        Ask Question
    




Asked
13 years, 3 months ago


Modified
3 months ago


Viewed
                        822k times
                    















            203
        












I have a section on our website that loads quite slowly as it's doing some intensive calls.
Any idea how I can get a div to say something similar to "loading" to show while the page prepares itself and then vanish when everything is ready?




javascriptjqueryhtmldomloader









Share



                    Follow
                








edited Jun 22, 2020 at 9:25





simhumileco

30.6k1616 gold badges135135 silver badges111111 bronze badges







        asked Dec 5, 2009 at 22:24





Shadi AlmosriShadi Almosri

11.6k1616 gold badges5757 silver badges7979 bronze badges














Add a comment
 | 















                                        13 Answers
                                    13






            Sorted by:
        

            Reset to default
        




                        Highest score (default)
                    

                        Trending (recent votes count more)
                    

                        Date modified (newest first)
                    

                        Date created (oldest first)
                    















            286
        

















Original Answer
I've needed this and after some research I came up with this (jQuery needed):
First, right after the <body> tag add this:
<div id="loading">
  <img id="loading-image" src="path/to/ajax-loader.gif" alt="Loading..." />
</div>

Then add the style class for the div and image to your CSS:
#loading {
  position: fixed;
  display: block;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  text-align: center;
  opacity: 0.7;
  background-color: #fff;
  z-index: 99;
}

#loading-image {
  position: absolute;
  top: 100px;
  left: 240px;
  z-index: 100;
}

Then, add this javascript to your page (preferably at the end of your page, before your closing </body> tag, of course):
<script>
  $(window).load(function() {
    $('#loading').hide();
  });
</script>

Finally, adjust the position of the loading image and the background-color of the loading div with the style class.
This is it, should work just fine. But of course you should have an ajax-loader.gif somewhere or use base64 url for image's src value. Freebies here. (Right-click > Save Image As...)
Update
For jQuery 3.0 and above you can use:
<script>
  $(window).on('load', function () {
    $('#loading').hide();
  }) 
</script>

Update
The original answer is from jQuery and before flexbox era. You can use many view management libraries / frameworks now like Angular, React and Vue.js. And for CSS you have flexbox option. Below is CSS alternative:
#loading {
  position: fixed;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  opacity: 0.7;
  background-color: #fff;
  z-index: 99;
}

#loading-image {
  z-index: 100;
}









Share



                    Follow
                








edited Nov 27, 2022 at 18:31












        answered Sep 1, 2010 at 11:49





mehyaamehyaa

3,21211 gold badge1616 silver badges1717 bronze badges







10






8




when redirecting to another page, it keeps in the same page and suddenly displays the desired page, then: show loading pane in prev page beforeunload as well as target page. window.onbeforeunload = function () { $('#loading').show(); }

– Sameh Deabes

Nov 13, 2013 at 13:55






2




+1 This is short, sweet and clear, I love it. However I will remove that div and leave only the <img> (;

– Francisco Presencia

Jun 3, 2014 at 22:45









4




it is taking a while to load loading image, until then page is loaded already

– Elyor

Sep 2, 2015 at 9:00






1




See my answer to avoid adding $('#loading').hide(); on each page load.

– rybo111

Mar 4, 2016 at 17:12






1




for jquery 3.0 and above use: $(window).on('load', function () { $('#loading').hide(); })

– Moslem Hadi

Feb 3, 2021 at 7:22







 | 
Show 5 more comments

















            51
        

















This script will add a div that covers the entire window as the page loads. It will show a CSS-only loading spinner automatically. It will wait until the window (not the document) finishes loading, then it will wait an optional extra few seconds.

Works with jQuery 3 (it has a new window load event)
No image needed but it's easy to add one
Change the delay for more branding or instructions
Only dependency is jQuery.

CSS loader code from https://projects.lukehaas.me/css-loaders


    
$('body').append('<div style="" id="loadingDiv"><div class="loader">Loading...</div></div>');
$(window).on('load', function(){
  setTimeout(removeLoader, 2000); //wait for page load PLUS two seconds.
});
function removeLoader(){
    $( "#loadingDiv" ).fadeOut(500, function() {
      // fadeOut complete. Remove the loading div
      $( "#loadingDiv" ).remove(); //makes page more lightweight 
  });  
}
        .loader,
        .loader:after {
            border-radius: 50%;
            width: 10em;
            height: 10em;
        }
        .loader {            
            margin: 60px auto;
            font-size: 10px;
            position: relative;
            text-indent: -9999em;
            border-top: 1.1em solid rgba(255, 255, 255, 0.2);
            border-right: 1.1em solid rgba(255, 255, 255, 0.2);
            border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);
            border-left: 1.1em solid #ffffff;
            -webkit-transform: translateZ(0);
            -ms-transform: translateZ(0);
            transform: translateZ(0);
            -webkit-animation: load8 1.1s infinite linear;
            animation: load8 1.1s infinite linear;
        }
        @-webkit-keyframes load8 {
            0% {
                -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
            }
            100% {
                -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
            }
        }
        @keyframes load8 {
            0% {
                -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
            }
            100% {
                -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
            }
        }
        #loadingDiv {
            position:absolute;;
            top:0;
            left:0;
            width:100%;
            height:100%;
            background-color:#000;
        }
This script will add a div that covers the entire window as the page loads. It will show a CSS-only loading spinner automatically. It will wait until the window (not the document) finishes loading.

  <ul>
    <li>Works with jQuery 3, which has a new window load event</li>
    <li>No image needed but it's easy to add one</li>
    <li>Change the delay for branding or instructions</li>
    <li>Only dependency is jQuery.</li>
  </ul>

Place the script below at the bottom of the body.

CSS loader code from https://projects.lukehaas.me/css-loaders

<!-- Place the script below at the bottom of the body -->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>











Share



                    Follow
                








edited Aug 6, 2019 at 13:10












        answered Jan 18, 2017 at 22:58





Victor StoddardVictor Stoddard

3,57422 gold badges2727 silver badges2727 bronze badges







6










How to add this for imag tags?

– Mano M

Feb 21, 2019 at 8:03






1




@ManoM $(window).on("load", handler) fires when all DOM objects finished loading, including images, scripts, even iframes. If you want to wait for a specific image to load, use $('#imageId').on("load", handler)

– Victor Stoddard

Feb 22, 2019 at 0:59










This for me is only working when the page first loads, i.e. when the browser/tab is opened or refreshed. However, it does not show up when the page is loading after it has been opened. I have a page with toggles showing different contents and when toggling between contents it takes a while to load. Is there a way in which I could adapt this same code to load not only the first time the page is opened but every time it is taking a while to load?

– Joehat

Dec 6, 2019 at 18:08






1




@Joehat replace $( "#loadingDiv" ).remove(); with $( "#loadingDiv" ).hide(); and add $( "#loadingDiv" ).show(); before setTimeout(removeLoader, 2000);. I had the div removed to make the page more lightweight, but this fix makes it reusable.

– Victor Stoddard

Dec 7, 2019 at 17:12













I tried your code.. It's strange. When I call my page it shows a blank page (it's loading content). After few seconds (I think contents are loaded) it shows the loader for 2 seconds, than it shows the full page. You can take a look: criferrara.it/crigest/toshiba

– sunlight76

Jan 17, 2020 at 18:55







 | 
Show 1 more comment













            37
        



















window.onload = function(){ document.getElementById("loading").style.display = "none" }
#loading {width: 100%;height: 100%;top: 0px;left: 0px;position: fixed;display: block; z-index: 99}

#loading-image {position: absolute;top: 40%;left: 45%;z-index: 100} 
<div id="loading">
<img id="loading-image" src="img/loading.gif" alt="Loading..." />
</div>  



Page loading image with simplest fadeout effect created in JS:








Share



                    Follow
                








edited Feb 4, 2019 at 12:33





Ced

1,23344 gold badges2020 silver badges3434 bronze badges







        answered Oct 7, 2012 at 10:14





Dariusz JDariusz J

55866 silver badges1111 bronze badges














Add a comment
 | 


















            10
        

















I have another below simple solution for this which perfectly worked for me. 
First of all, create a CSS with name Lockon class which is transparent overlay along with loading GIF as shown below 
.LockOn {
    display: block;
    visibility: visible;
    position: absolute;
    z-index: 999;
    top: 0px;
    left: 0px;
    width: 105%;
    height: 105%;
    background-color:white;
    vertical-align:bottom;
    padding-top: 20%; 
    filter: alpha(opacity=75); 
    opacity: 0.75; 
    font-size:large;
    color:blue;
    font-style:italic;
    font-weight:400;
    background-image: url("../Common/loadingGIF.gif");
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-position: center;
}

Now we need to create our div with this class which cover entire page as an overlay whenever the page is getting loaded
<div id="coverScreen"  class="LockOn">
</div>

Now we need to hide this cover screen whenever the page is ready and so that we can restrict the user from clicking/firing any event until the page is ready
$(window).on('load', function () {
$("#coverScreen").hide();
});

Above solution will be fine whenever the page is loading.
Now the question is after the page is loaded, whenever we click a button or an event which will take a long time, we need to show this in the client click event as shown below
$("#ucNoteGrid_grdViewNotes_ctl01_btnPrint").click(function () {
$("#coverScreen").show();
});

That means when we click this print button (which will take a long time to give the report) it will show our cover screen with GIF which gives  result and once the page is ready above windows on load function will fire and which hide the cover screen once the screen is fully loaded. 








Share



                    Follow
                








edited Jul 3, 2018 at 7:28





Roshana Pitigala

8,28788 gold badges4747 silver badges7777 bronze badges







        answered Jul 17, 2017 at 11:26





Rinoy AshokanRinoy Ashokan

1,4511616 silver badges1414 bronze badges







2






2




Great! only had to use these to make it full screen  position:fixed; width: 100vw; height:100vh;

– boateng

Nov 20, 2017 at 20:22










Sorry, but what are you reffering at with $("#ucNoteGrid_grdViewNotes_ctl01_btnPrint")

– user2478262

Oct 28, 2021 at 15:28






Add a comment
 | 














            6
        

















Default the contents to display:none and then have an event handler that sets it to display:block or similar after it's fully loaded. Then have a div that's set to display:block with "Loading" in it, and set it to display:none in the same event handler as before.








Share



                    Follow
                








        answered Dec 5, 2009 at 22:28





AmberAmber

499k8282 gold badges622622 silver badges548548 bronze badges







2






2




what event would you use to do this? Javascript page load? or is there a better place?

– Miles

Dec 5, 2009 at 22:29










Depends on if you have other JS doing setup stuff for the page - if so, call it after those are done, if not, then document onload works fine.

– Amber

Dec 5, 2009 at 22:30






Add a comment
 | 














            3
        

















Here's the jQuery I ended up using, which monitors all ajax start/stop, so you don't need to add it to each ajax call:
$(document).ajaxStart(function(){
    $("#loading").removeClass('hide');
}).ajaxStop(function(){
    $("#loading").addClass('hide');
});

CSS for the loading container & content (mostly from mehyaa's answer), as well as a hide class:
#loading {
   width: 100%;
   height: 100%;
   top: 0px;
   left: 0px;
   position: fixed;
   display: block;
   opacity: 0.7;
   background-color: #fff;
   z-index: 99;
   text-align: center;
}

#loading-content {
  position: absolute;
  top: 50%;
  left: 50%;
  text-align: center;
  z-index: 100;
}

.hide{
  display: none;
}

HTML:
<div id="loading" class="hide">
  <div id="loading-content">
    Loading...
  </div>
</div>









Share



                    Follow
                








edited Mar 7, 2016 at 12:55












        answered Mar 4, 2016 at 16:39





rybo111rybo111

12.1k44 gold badges6161 silver badges6969 bronze badges







1










The problem is, if i have a ajax loaded autocomplete in a input, the loader will appear.

– Lucas

Jun 9, 2017 at 14:08






Add a comment
 | 














            2
        

















Well, this largely depends on how you're loading the elements needed in the 'intensive call', my initial thought is that you're doing those loads via ajax.  If that's the case, then you could use the 'beforeSend' option and make an ajax call like this:
$.ajax({
  type: 'GET',
  url: "some.php",
  data: "name=John&location=Boston",

  beforeSend: function(xhr){           <---- use this option here
     $('.select_element_you_want_to_load_into').html('Loading...');
  },

  success: function(msg){
     $('.select_element_you_want_to_load_into').html(msg);
  }
});

EDIT
I see, in that case, using one of the 'display:block'/'display:none' options above in conjunction with $(document).ready(...) from jQuery is probably the way to go. The $(document).ready() function waits for the entire document structure to be loaded before executing (but it doesn't wait for all media to load). You'd do something like this:
$(document).ready( function() {
  $('table#with_slow_data').show();
  $('div#loading image or text').hide();
});









Share



                    Follow
                








edited Aug 26, 2015 at 12:18





ann

57811 gold badge99 silver badges1919 bronze badges







        answered Dec 5, 2009 at 22:41





btellesbtelles

5,38077 gold badges4646 silver badges7777 bronze badges







3










unfortunatly it's not through ajax, it's waiting for the php script to prepare the data from the database, so some of the html elements are loaded then the browser waits for the table of data before loading the rest.  Which could look as if the page has stalled, so need something displayed there to show that "something is happening" and not cause the user to move away...

– Shadi Almosri

Dec 7, 2009 at 0:22










FYI: The principle of the web (without ajax) is that a server renders an entire page serverside and on completion it sends this result (html) to the browser. If the rendering of the page is halted somewhere in the middle (while you can see the page appearing in the browser), it can't be a php script, because php only runs  serverside.

– Peter

Sep 1, 2010 at 12:00










See my answer to avoid adding beforeSend and success to each ajax call.

– rybo111

Mar 4, 2016 at 17:12






Add a comment
 | 














            2
        

















My blog will work 100 percent.


function showLoader()
{
    $(".loader").fadeIn("slow");
}
function hideLoader()
{
    $(".loader").fadeOut("slow");
}
.loader {
    position: fixed;
    left: 0px;
    top: 0px;
    width: 100%;
    height: 100%;
    z-index: 9999;
    background: url('pageLoader2.gif') 50% 50% no-repeat rgb(249,249,249);
    opacity: .8;
}
<div class="loader"></div>











Share



                    Follow
                








edited Sep 16, 2022 at 1:37





developer033

23.8k88 gold badges8181 silver badges108108 bronze badges







        answered Oct 17, 2017 at 8:36





Jitendra PatelJitendra Patel

511010 bronze badges







1






1




That <div> tag there is not closed

– sdbbs

Sep 1, 2021 at 7:53






Add a comment
 | 














            1
        

















Create a <div> element that contains your loading message, give the <div> an ID, and then when your content has finished loading, hide the <div>:
$("#myElement").css("display", "none");

...or in plain JavaScript:
document.getElementById("myElement").style.display = "none";









Share



                    Follow
                








        answered Dec 5, 2009 at 22:34





Steve HarrisonSteve Harrison

119k1515 gold badges8686 silver badges7272 bronze badges







1










Simple and gets the job done. From a readability perspective isn't $("#myElement").hide() easier on the eyes?

– user3613932

May 16, 2019 at 1:25






Add a comment
 | 














            1
        

















This will be in synchronisation with an api call, When the api call is triggered, the loader is shown. When the api call is succesful, the loader is removed. This can be used for either page load or during an api call.
  $.ajax({
    type: 'GET',
    url: url,
    async: true,
    dataType: 'json',
    beforeSend: function (xhr) {
      $( "<div class='loader' id='searching-loader'></div>").appendTo("#table-playlist-section");
      $("html, body").animate( { scrollTop: $(document).height() }, 100);
    },
    success: function (jsonOptions) {
      $('#searching-loader').remove();
      .
      .
    }
  });

CSS
.loader {
  border: 2px solid #f3f3f3;
  border-radius: 50%;
  border-top: 2px solid #3498db;
  width: 30px;
  height: 30px;
  margin: auto;
  -webkit-animation: spin 2s linear infinite; /* Safari */
  animation: spin 2s linear infinite;
  margin-top: 35px;
  margin-bottom: -35px;
}

/* Safari */
@-webkit-keyframes spin {
  0% { -webkit-transform: rotate(0deg); }
  100% { -webkit-transform: rotate(360deg); }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}









Share



                    Follow
                








        answered Jun 1, 2020 at 0:02





london_utkulondon_utku

94322 gold badges1212 silver badges3333 bronze badges














Add a comment
 | 














            1
        

















for drupal in your theme
custom_theme.theme file
function custom_theme_preprocess_html(&$variables) {
$variables['preloader'] = 1;
}

In html.html.twig file after skip main content link in body
{% if preloader %} 
  <div id="test-preloader" >
    <div id="preloader-inner" class="cssload-container">
      <div class="wait-text">{{ 'Please wait...'|t }} </div> 
      <div class="cssload-item cssload-moon"></div>
    </div>
  </div>
{% endif %}  

in css file
#test-preloader {
position: fixed;
background: white;
width: 100%;
height: 100%;
top: 0;
left: 0;
z-index: 9999;
}
.cssload-container .wait-text {
text-align: center;
padding-bottom: 15px;
color: #000;
}

.cssload-container .cssload-item {
 margin: auto;
 position: absolute;
 top: 0;
 right: 0;
 bottom: 0;
 left: 0;
 width: 131px;
 height: 131px;
 background-color: #fff;
 box-sizing: border-box;
 -o-box-sizing: border-box;
 -ms-box-sizing: border-box;
 -webkit-box-sizing: border-box;
 -moz-box-sizing: border-box;
 box-shadow: 0 0 21px 3px rgba(130, 130, 130, 0.26);
 -o-box-shadow: 0 0 21px 3px rgba(130, 130, 130, 0.26);
 -ms-box-shadow: 0 0 21px 3px rgba(130, 130, 130, 0.26);
 -webkit-box-shadow: 0 0 21px 3px rgba(130, 130, 130, 0.26);
 -moz-box-shadow: 0 0 21px 3px rgba(130, 130, 130, 0.26);
 }

.cssload-container .cssload-moon {
border-bottom: 26px solid #008AFA;
border-radius: 50%;
-o-border-radius: 50%;
-ms-border-radius: 50%;
-webkit-border-radius: 50%;
-moz-border-radius: 50%;
animation: spin 1.45s ease infinite;
-o-animation: spin 1.45s ease infinite;
-ms-animation: spin 1.45s ease infinite;
-webkit-animation: spin 1.45s ease infinite;
-moz-animation: spin 1.45s ease infinite;
 }









Share



                    Follow
                








        answered Jun 23, 2020 at 9:16





PradeepPradeep

31744 silver badges99 bronze badges














Add a comment
 | 














            1
        

















I needed a splash screen, which I implemented by reusing parts of the solutions listed here. It uses Vanilla JS for full backwards-compatibility.
Step 1: Add a background with a spinner gif on top of the page, then remove them when everything is loaded.
body.has-js::before {
  content: '';
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: 10;
  height: 100vh;
  width: 100vw;
  pointer-events: none;
  transition: all .2s;
  background: white url('/img/spinner.gif') no-repeat center center / 50px;
}
body.loaded::before {
  opacity: 0;
  width: 0;
  height: 0;
}

Step 2: Add a little script right after the opening body tag to start displaying the load/splash screen.
<body>
  <script>
    // Only show loader if JS is available
    document.body.className += ' has-js';
    // Option 1: Hide loader when 'load' event fires
    window.onload = function() { document.body.className += ' loaded'; }
    // Option 2: Hide loader after 2 seconds, in case the 'load' event never fires
    setTimeout(function(){ document.body.className += ' loaded'; }, 1000 * 2);
  </script>
  <!-- Page content goes after this -->
</body>









Share



                    Follow
                








        answered Jun 4, 2021 at 13:06





GoulvenGoulven

7571010 silver badges2020 bronze badges







0






Add a comment
 | 














            0
        

















Based on @mehyaa answer, but much shorter:
HTML (right after <body>):
<img id = "loading" src = "loading.gif" alt = "Loading indicator">

CSS:
#loading {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 32px;
  height: 32px;
  /* 1/2 of the height and width of the actual gif */
  margin: -16px 0 0 -16px;
  z-index: 100;
  }

Javascript (jQuery, since I'm already using it):
$(window).load(function() {
  $('#loading').remove();
  });









Share



                    Follow
                








        answered Jun 3, 2014 at 23:14





Francisco PresenciaFrancisco Presencia

8,68366 gold badges4747 silver badges9090 bronze badges







1






2




It's better to hide() the element rather than remove() it, so that you can re-use it.

– rybo111

Mar 4, 2016 at 14:56






Add a comment
 | 













Highly active question. Earn 10 reputation (not counting the association bonus) in order to answer this question. The reputation requirement helps protect this question from spam and non-answer activity.                    






Not the answer you're looking for? Browse other questions tagged javascriptjqueryhtmldomloader or ask your own question.                                







                            The Overflow Blog
                        


 

Can Stack Overflow save the day?




 

Let’s talk large language models (Ep. 546)



                            Featured on Meta
                        


 

We've added a "Necessary cookies only" option to the cookie consent popup




 

The Stack Exchange reputation system: What's working? What's not?




 

Launching the CI/CD and R Collectives and community editing features for...




 

Staging Ground Beta 1 Recap, and Reviewers needed for Beta 2




 

Temporary policy: ChatGPT is banned












 
Linked



2

Loading screen using jquery



-1

'no image' icon while outputting AJAX-delivered content



0

SetTimeout Loader Animation Site



17

Django - show loading message during long processing



6

How to create a loader in Javascript waiting for a function to end?



4

Implementing a loading spinning wheel in javascript



3

using fadeOut() or hide() to fade/hide Bootstrap 4 spinner/loader when browser window is completely loaded



2

Enable "open in new tab/window" in right click



2

show a loading image while a table is being built in a part of the html



1

Add loading image after click the `register` button in Laravel 8


See more linked questions




Related



2637

Make a div fill the height of the remaining screen space



4347

How do I copy to the clipboard in JavaScript?



1579

How do I find out which DOM element has the focus?



2924

How do I modify the URL without reloading the page?



4994

How do I make the first letter of a string uppercase in JavaScript?



2615

How to make a div 100% height of the browser window



2387

Get the size of the screen, current web page and browser window



2706

How do I refresh a page using JavaScript?



6560

How do I return the response from an asynchronous call?







            Hot Network Questions
        




                    Tolkien's art - Lake Mithrim
                



                    How can I check if this airline ticket is genuine?
                



                    How do you prevent yourself from neglecting scientific accuracy in a sci-fi-fantasy story without telling?
                



                    Check memory usage of process which exits immediately
                



                    Does it make sense from a pro-Ukrainian perspective to sabotage Nord Stream?
                



                    What's the earliest fictional work of literature that contains an allusion to an earlier fictional work of literature?
                



                    Ethernet speed at 2.5Gbps despite interface being 5Gbps and negotiated as such
                



                    Is it OK practice to start a car while it's on jackstands?
                



                    are there any non conventional sources of law?
                



                    Why do I have extra copper tubing connected to each bathroom sink supply line?
                



                    Convolution of Poisson with Binomial distribution?
                



                    What should I call the "important" values of x?
                



                    How to protect sql connection string in clientside application?
                



                    Trying to remember a short film about an assembly line AI becoming self-aware
                



                    when did command line applications start using "-h" as a "standard" way to print "help"?
                



                    Peano axiom of induction with "no junk"
                



                    Where on Earth is this background image in Windows from?
                



                    Scrum Team - Being asked to estimate project end date with an incomplete backlog
                



                    Rabbi Meir's yeshiva
                



                    "Mainframe" with Z80
                



                    Apply pattern using a Slot (#) to each list element using a second slot
                



                    Can I wait airside at Melbourne (MEL) until midnight before passing immigration?
                



                    How do you handle giving an invited university talk in a smaller room compared to previous speakers?
                



                    Why do we say gravity curves space but the other forces don't?
                



            more hot questions
        




            Question feed
        




                Subscribe to RSS
            



                        Question feed
                        To subscribe to this RSS feed, copy and paste this URL into your RSS reader.















default











Stack Overflow

Questions
Help



Products

Teams
Advertising
Collectives
Talent



Company

About
Press
Work Here
Legal
Privacy Policy
Terms of Service
Contact Us
Cookie Settings
Cookie Policy




Stack Exchange Network



                                    Technology
                                



                                    Culture & recreation
                                



                                    Life & arts
                                



                                    Science
                                



                                    Professional
                                



                                    Business
                                



                                    API
                                



                                    Data
                                







Blog
Facebook
Twitter
LinkedIn
Instagram


Site design / logo © 2023 Stack Exchange Inc; user contributions licensed under CC BY-SA.                    rev 2023.3.17.43321














                        Your privacy
                    

                        By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.
                    


                            Accept all cookies
                        

                            Necessary cookies only
                        



                            Customize settings
                        





 

Skip to content
CoursesFor Working ProfessionalsData Structure & Algorithm Classes (Live)System Design (Live)DevOps(Live)Explore More Live CoursesFor StudentsInterview Preparation CourseData Science (Live)GATE CS & IT 2024Data Structure & Algorithm-Self Paced(C++/JAVA)Data Structures & Algorithms in PythonExplore More Self-Paced CoursesProgramming LanguagesC++ Programming - Beginner to AdvancedJava Programming - Beginner to AdvancedC Programming - Beginner to AdvancedWeb DevelopmentFull Stack Development with React & Node JS(Live)Java Backend Development(Live)Android App Development with Kotlin(Live)Python Backend Development with Django(Live)Machine Learning and Data ScienceComplete Data Science Program(Live)Mastering Data AnalyticsNew CoursesPython Backend Development with Django(Live)Android App Development with Kotlin(Live)DevOps Engineering - Planning to ProductionSchool CoursesCBSE Class 12 Computer ScienceSchool GuideAll CoursesTutorialsDSAData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetitive ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonJavaScriptPHPC#SQLScalaPerlGo LanguageKotlinWeb DevelopmentHTMLCSSJavaScriptPHPCSS FrameworksBootstrapTailwind CSSFoundation CSSMaterialize CSSBulmaPure CSSPrimer CSSBlaze UISemantic UIJavaScript FrameworksAngularJSAngular PrimeNGAngular ngx BootstrapNodeJSExpress.jsJavaScript LibrariesjQueryjQuery MobilejQuery UIjQuery EasyUIjQWidgetsReactJSReact BootstrapReact RebassReact DesktopReact SuiteReactJS EvergreenReactJS ReactstrapAnt DesignBlueprintJSp5.jsLodashTensorFlow.jsMoment.jsCollect.jsWordPressJSONSchool LearningEnglish GrammarSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusCBSE Syllabus Class 8 SyllabusClass 9 SyllabusClass 10 SyllabusClass 11 SyllabusClass 12 SyllabusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesMaths Formulas (Class 8 -11)Class 8 FormulasClass 9 FormulasClass 10 FormulasClass 11 FormulasNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionScience NotesClass 8 NotesClass 9 NotesClass 10 NotesPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesChemistry NotesClass 8 NotesClass 9 NotesClass 10 NotesBiology NotesClass 8Class 9Class 10Class 11Social Science Syllabus Class 7 SS SyllabusClass 8 SS SyllabusClass 9 SS SyllabusClass 10 SS SyllabusSocial Science NotesSS Notes (Class 7-12)Class 7 NotesClass 8 NotesClass 9 NotesClass 10 NotesCBSE History Notes (Class 7-10)History Class 7History Class 8History Class 9CBSE Geography Notes (Class 7-10)Geo. Class 7Geo. Class 8Geo. Class 9CBSE Civics Notes (Class 7-10)Civics Class 7Civics Class 8CommerceBusiness Studies (Class 11th)Microeconomics (Class 11th)Statistics for Economics (Class 11th)Business Studies (Class 12th)Accountancy (Class 12th)Macroeconomics (Class 12th)ML & Data ScienceMachine LearningData ScienceCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE 2024 Live CourseGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE CS 2023 SyllabusImportant Topics for GATE CSGATE 2023 Important DatesSoftware DesignsSoftware Design PatternsSystem Design TutorialGFG SheetsWeb Dev Cheat SheetsHTML Cheat SheetCSS Cheat SheetBootstrap Cheat SheetJS Cheat SheetjQuery Cheat SheetAngular Cheat SheetCompany-Wise SDE SheetsFacebook SDE SheetAmazon SDE SheetApple SDE SheetNetflix SDE SheetGoogle SDE SheetWipro Coding SheetInfosys Coding SheetTCS Coding SheetCognizant Coding SheetHCL Coding SheetDSA SheetsSDE SheetFAANG Coding SheetLove Babbar SheetMass Recruiter SheetProduct-Based Coding SheetCompany-Wise Preparation SheetArray SheetString SheetTree SheetGraph SheetDP SheetCS Exams/PSUsISROISRO CS Original Papers and Official KeysISRO CS Solved PapersISRO CS Syllabus for Scientist/Engineer ExamUGC NETUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetitive ProgrammingTestimonialsStudent ChapterGeek on the TopInternshipCareersUPSCGeography NotesHistory NotesScience & Tech. NotesEthics NotesPolity NotesEconomics NotesUPSC Previous Year PapersSSC CGLSSC CGL SyllabusGeneral StudiesEnglishReasoningSubjectwise Practice PapersPrevious Year PapersBanking ExamsSBI ClerkSBI Clerk SyllabusGeneral AwarenessEnglishQuantitative AptitudeReasoning AbilitySBI Clerk Practice PapersSBI POSBI PO SyllabusGeneral AwarenessEnglishQuantitative AptitudeReasoning AbilityPrevious Year PapersSBI PO Practice PapersIBPS POIBPS PO 2022 SyllabusEnglish NotesReasoning NotesPrevious Year PapersMock Question PapersGeneral AwarenessGeneral AwarenessIBPS ClerkIBPS Clerk SyllabusEnglish NotesPrevious Year PapersJobsApply for a JobApply through JobathonPost a JobHire through JobathonPracticeAll DSA ProblemsProblem of the DayGFG SDE SheetCurated DSA ListsTop 50 Array ProblemsTop 50 String ProblemsTop 50 Tree ProblemsTop 50 Graph ProblemsTop 50 DP ProblemsContestsSolving For India-HackthonGFG Weekly Coding ContestJob-A-Thon: Hiring ChallengeBiWizard School ContestAll Contests and Events



HomeSaved VideosCoursesGBlogPuzzlesWhat's New ?


Change Language
JS-ArrayJS-StringJS-FunctionJS-MapJS-MathJS-DateJS-NumberJS-ObjectJS-PromiseJS-RegExpJS-BigIntJS-BooleanJS-ErrorJS-IntlJS-SymbolJS-ProxyJS-ReflectJS-WeakMapJS-WeakSetJS-GeneratorJS-JSONJS-ExpressionsJS-ArrayBufferJS-AtomicsJS-TutorialWeb DevelopmentWeb-Technology

Related Articles

▲Open in App
Not nowRelated ArticlesWrite an ArticleWrite ArticlesPick Topics to writeGuidelines to WriteGet Technical Writing InternshipWrite an Interview ExperienceCSS to put icon inside an input element in a formHow to place Font Awesome icon to input field ?How to validate if input in input field has integer number only using express-validator ?How to validate if input in input field has float number only using express-validator ?HTML | DOM onpageshow EventHow to run a function when the page is loaded in JavaScript ?How to show Page Loading div until the page has finished loading?How to Display Spinner on the Screen till the data from the API loads using Angular 8 ?How to Create a Bootstrap Spinner and Display on Screen till the data from the API loads ?HTML5 | translate AttributeHow To Add Google Translate Button On Your Webpage?How to Add Google Charts on a Webpage?PHP | Gmagick thumbnailimage() FunctionHow to Draw a Semi-Circle using HTML and CSS ?How to Draw a Half Moon using HTML and CSS?How to solve “Submit is not a function” error in JavaScript ?How to reset a form using jQuery with .reset() method?How to clear form after submit in Javascript without using reset?HTML | Clearing the input fieldHow to put a responsive clear button inside HTML input text field ?Write an ArticleWrite ArticlesPick Topics to writeGuidelines to WriteGet Technical Writing InternshipWrite an Interview ExperienceHow to calculate the number of days between two dates in JavaScript ?File uploading in React.jsHide elements in HTML using display propertyHow to append HTML code to a div using JavaScript ?Difference between var and let in JavaScriptJavaScript Number toString() MethodConvert a string to an integer in JavaScriptHow to Open URL in New Tab using JavaScript ?How do you run JavaScript script through the Terminal?JavaScript console.log() MethodWrite an ArticleWrite ArticlesPick Topics to writeGuidelines to WriteGet Technical Writing InternshipWrite an Interview ExperienceCSS to put icon inside an input element in a formHow to place Font Awesome icon to input field ?How to validate if input in input field has integer number only using express-validator ?How to validate if input in input field has float number only using express-validator ?HTML | DOM onpageshow EventHow to run a function when the page is loaded in JavaScript ?How to show Page Loading div until the page has finished loading?How to Display Spinner on the Screen till the data from the API loads using Angular 8 ?How to Create a Bootstrap Spinner and Display on Screen till the data from the API loads ?HTML5 | translate AttributeHow To Add Google Translate Button On Your Webpage?How to Add Google Charts on a Webpage?PHP | Gmagick thumbnailimage() FunctionHow to Draw a Semi-Circle using HTML and CSS ?How to Draw a Half Moon using HTML and CSS?How to solve “Submit is not a function” error in JavaScript ?How to reset a form using jQuery with .reset() method?How to clear form after submit in Javascript without using reset?HTML | Clearing the input fieldHow to put a responsive clear button inside HTML input text field ?Write an ArticleWrite ArticlesPick Topics to writeGuidelines to WriteGet Technical Writing InternshipWrite an Interview ExperienceHow to calculate the number of days between two dates in JavaScript ?File uploading in React.jsHide elements in HTML using display propertyHow to append HTML code to a div using JavaScript ?Difference between var and let in JavaScriptJavaScript Number toString() MethodConvert a string to an integer in JavaScriptHow to Open URL in New Tab using JavaScript ?How do you run JavaScript script through the Terminal?JavaScript console.log() MethodHow to show Page Loading div until the page has finished loading?Improve Article

Save Article

Like Article

Difficulty Level :
MediumLast Updated :
23 Jan, 2023ReadDiscussCoursesPracticeVideoImprove Article

Save Article

There are a lot of ways in which we can show a loading div but we have figured out the most optimal solution for you and that too in pure vanilla JavaScript. We will use the document.readyState property. When the value of this property changes, a readystatechange event fires on the document object. The document.readyState property can return these three string values: loading: when the document is still loading. interactive: when the document has finished loading but sub-resources such as stylesheets, images, and frames are still loading. complete: when the document and all sub-resources have finished loading. Let’s have a look at the JavaScript code: document.onreadystatechange = function() {
    if (document.readyState !== "complete") {
        document.querySelector("body").style.visibility = "hidden";
        document.querySelector("#loader").style.visibility = "visible";
    } else {
        document.querySelector("#loader").style.display = "none";
        document.querySelector("body").style.visibility = "visible";
    }
};
When document.readyState changes, readystatechange event fires and our function executes. If the document is not yet loaded then the body should remain hidden from the user, only the loader should be visible. Once the page has completely loaded we set the loader’s display to none and we make the body visible. Example: html<style>    #loader {        border: 12px solid #f3f3f3;        border-radius: 50%;        border-top: 12px solid #444444;        width: 70px;        height: 70px;        animation: spin 1s linear infinite;    }          @keyframes spin {        100% {            transform: rotate(360deg);        }    }          .center {        position: absolute;        top: 0;        bottom: 0;        left: 0;        right: 0;        margin: auto;    }</style><div id="loader" class="center"></div><h1>GeeksforGeeks</h1><h2>A computer science portal for geeks</h2><img src="https://i.imgur.com/KsQJA8I.png" alt="GeeksforGeeks logo" /><script>    document.onreadystatechange = function() {        if (document.readyState !== "complete") {            document.querySelector(            "body").style.visibility = "hidden";            document.querySelector(            "#loader").style.visibility = "visible";        } else {            document.querySelector(            "#loader").style.display = "none";            document.querySelector(            "body").style.visibility = "visible";        }    };</script>To see the code in action, you need to follow these simple steps: Step 1: Copy and paste the example code from above in a text editor and save it with .html extension. Step 2: Open the .html file you saved then open your browser’s developer tool, go to the networks tab and set throttling to Slow 3G. Here’s a GIF to show you how to do it:Setting network throttling to slow 3G in developer’s toolStep 3: Reload the page using ctrl + f5. Here’s how the final output looks like:Final outputMy Personal Notes
arrow_drop_upSavePlease Login to comment...Related Articles1.
How to define that the script is executed when the page has finished parsing ?2.
How to create Show More and Show Less functionality for hiding text using JavaScript ?3.
Node.js stream.finished() Method4.
Node.js Http2ServerResponse.finished Method5.
How to Show and Hide div elements using radio buttons?6.
How to Show and Hide div elements using Checkboxes ?7.
How to show/hide div element depending multiple values using Bootstrap and jQuery ?8.
How to hide div element by default and show it on click using JavaScript and Bootstrap ?9.
How to overlay one div over another div using CSS10.
How to copy the content of a div into another div using jQuery ?

LikePreviousHow to run a function when the page is loaded in JavaScript ?Next
How to Display Spinner on the Screen till the data from the API loads using Angular 8 ?Article Contributed By :vivekmittalagrawal@vivekmittalagrawalVote for difficultyCurrent difficulty :
MediumEasy
Normal
Medium
Hard
ExpertImproved By :shobhit_sharmaArticle Tags :JavaScript-QuestionsPickedJavaScriptWeb TechnologiesReport IssueCourses

96k+ interested GeeksFull Stack Development with React & Node JS - Live
Intermediate and Advance
23k+ interested GeeksJavaScript Foundation - Self Paced
Beginner and Intermediate
9k+ interested GeeksComplete Test Series for Service-Based Companies
Beginner to Advance
2k+ interested GeeksCBSE Class 12 Computer Science
Beginner to Advance
71k+ interested GeeksSystem Design - Live
Intermediate and Advance
77k+ interested GeeksJAVA Backend Development - Live
Intermediate and Advance
127k+ interested GeeksDSA Live for Working Professionals - Live
Intermediate and Advance
81k+ interested GeeksComplete Machine Learning & Data Science Program
Beginner to Advance
2k+ interested GeeksPython Backend Development with Django - Live
Beginner to Advance
84k+ interested GeeksMaster C Programming with Data Structures
Beginner to Advance
98k+ interested GeeksMaster C++ Programming - Complete Beginner to Advanced
Beginner to Advance
39k+ interested GeeksComplete Test Series for Product-Based Companies
Beginner to Advance
858k+ interested GeeksData Structures and Algorithms - Self Paced
Beginner to Advance
6k+ interested GeeksMastering Data Analytics
Beginner to Advance
111k+ interested GeeksData Structures & Algorithms in Python - Self Paced
Beginner to Advance
701 interested GeeksAndroid App Development with Kotlin - Live
Beginner to Advance
115k+ interested GeeksMaster Java Programming - Complete Beginner to Advanced
Beginner to Advance
756k+ interested GeeksComplete Interview Preparation - Self Paced
Beginner to AdvanceImprove your Coding Skills with PracticeTry It!
A-143, 9th Floor, Sovereign Corporate Tower,Sector-136, Noida, Uttar Pradesh - 201305
feedback@geeksforgeeks.orgCompanyAbout UsCareersIn MediaContact UsPrivacy PolicyCopyright PolicyAdvertise with usLearnDSAAlgorithmsData StructuresSDE Cheat SheetMachine learningCS SubjectsVideo TutorialsCoursesNewsTop NewsTechnologyWork & CareerBusinessFinanceLifestyleKnowledgeLanguagesPythonJavaCPPGolangC#SQLKotlinWeb DevelopmentWeb TutorialsDjango TutorialHTMLJavaScriptBootstrapReactJSNodeJSContributeWrite an ArticleImprove an ArticlePick Topics to WriteWrite Interview ExperienceInternshipsVideo Internship@geeksforgeeks
, Some rights reservedWe use cookies to ensure you have the best browsing experience on our website. By using our site, you
acknowledge that you have read and understood our
Cookie Policy &
        Privacy Policy

Got It !
Start Your Coding Journey Now!Login
Register









Stack Overflow



About



						Products
					


For Teams







Stack Overflow
Public questions & answers




Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers




Talent

								Build your employer brand
							




Advertising
Reach developers & technologists worldwide



About the company











Loading…














current community
















            Stack Overflow
        



help
chat









            Meta Stack Overflow
        






your communities            



Sign up or log in to customize your list.                


more stack exchange communities

company blog








Log in

Sign up














                    Home
                





Public


 Questions






                    Tags
                







                    Users
                







                    Companies
                





Collectives









 Explore Collectives







Teams

Stack Overflow for Teams
        – Start collaborating and sharing organizational knowledge.
        
        
Create a free Team
Why Teams?



Teams
















                            Create free Team
                        












Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.

                    Learn more about Collectives
                





Teams
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.

                    Learn more about Teams
                











How to show Page Loading div until the page has finished loading?


        Ask Question
    




Asked
13 years, 3 months ago


Modified
3 months ago


Viewed
                        822k times
                    















            203
        












I have a section on our website that loads quite slowly as it's doing some intensive calls.
Any idea how I can get a div to say something similar to "loading" to show while the page prepares itself and then vanish when everything is ready?




javascriptjqueryhtmldomloader









Share



                    Follow
                








edited Jun 22, 2020 at 9:25





simhumileco

30.6k1616 gold badges135135 silver badges111111 bronze badges







        asked Dec 5, 2009 at 22:24





Shadi AlmosriShadi Almosri

11.6k1616 gold badges5757 silver badges7979 bronze badges














Add a comment
 | 















                                        13 Answers
                                    13






            Sorted by:
        

            Reset to default
        




                        Highest score (default)
                    

                        Trending (recent votes count more)
                    

                        Date modified (newest first)
                    

                        Date created (oldest first)
                    















            286
        

















Original Answer
I've needed this and after some research I came up with this (jQuery needed):
First, right after the <body> tag add this:
<div id="loading">
  <img id="loading-image" src="path/to/ajax-loader.gif" alt="Loading..." />
</div>

Then add the style class for the div and image to your CSS:
#loading {
  position: fixed;
  display: block;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  text-align: center;
  opacity: 0.7;
  background-color: #fff;
  z-index: 99;
}

#loading-image {
  position: absolute;
  top: 100px;
  left: 240px;
  z-index: 100;
}

Then, add this javascript to your page (preferably at the end of your page, before your closing </body> tag, of course):
<script>
  $(window).load(function() {
    $('#loading').hide();
  });
</script>

Finally, adjust the position of the loading image and the background-color of the loading div with the style class.
This is it, should work just fine. But of course you should have an ajax-loader.gif somewhere or use base64 url for image's src value. Freebies here. (Right-click > Save Image As...)
Update
For jQuery 3.0 and above you can use:
<script>
  $(window).on('load', function () {
    $('#loading').hide();
  }) 
</script>

Update
The original answer is from jQuery and before flexbox era. You can use many view management libraries / frameworks now like Angular, React and Vue.js. And for CSS you have flexbox option. Below is CSS alternative:
#loading {
  position: fixed;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  opacity: 0.7;
  background-color: #fff;
  z-index: 99;
}

#loading-image {
  z-index: 100;
}









Share



                    Follow
                








edited Nov 27, 2022 at 18:31












        answered Sep 1, 2010 at 11:49





mehyaamehyaa

3,21211 gold badge1616 silver badges1717 bronze badges







10






8




when redirecting to another page, it keeps in the same page and suddenly displays the desired page, then: show loading pane in prev page beforeunload as well as target page. window.onbeforeunload = function () { $('#loading').show(); }

– Sameh Deabes

Nov 13, 2013 at 13:55






2




+1 This is short, sweet and clear, I love it. However I will remove that div and leave only the <img> (;

– Francisco Presencia

Jun 3, 2014 at 22:45









4




it is taking a while to load loading image, until then page is loaded already

– Elyor

Sep 2, 2015 at 9:00






1




See my answer to avoid adding $('#loading').hide(); on each page load.

– rybo111

Mar 4, 2016 at 17:12






1




for jquery 3.0 and above use: $(window).on('load', function () { $('#loading').hide(); })

– Moslem Hadi

Feb 3, 2021 at 7:22







 | 
Show 5 more comments

















            51
        

















This script will add a div that covers the entire window as the page loads. It will show a CSS-only loading spinner automatically. It will wait until the window (not the document) finishes loading, then it will wait an optional extra few seconds.

Works with jQuery 3 (it has a new window load event)
No image needed but it's easy to add one
Change the delay for more branding or instructions
Only dependency is jQuery.

CSS loader code from https://projects.lukehaas.me/css-loaders


    
$('body').append('<div style="" id="loadingDiv"><div class="loader">Loading...</div></div>');
$(window).on('load', function(){
  setTimeout(removeLoader, 2000); //wait for page load PLUS two seconds.
});
function removeLoader(){
    $( "#loadingDiv" ).fadeOut(500, function() {
      // fadeOut complete. Remove the loading div
      $( "#loadingDiv" ).remove(); //makes page more lightweight 
  });  
}
        .loader,
        .loader:after {
            border-radius: 50%;
            width: 10em;
            height: 10em;
        }
        .loader {            
            margin: 60px auto;
            font-size: 10px;
            position: relative;
            text-indent: -9999em;
            border-top: 1.1em solid rgba(255, 255, 255, 0.2);
            border-right: 1.1em solid rgba(255, 255, 255, 0.2);
            border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);
            border-left: 1.1em solid #ffffff;
            -webkit-transform: translateZ(0);
            -ms-transform: translateZ(0);
            transform: translateZ(0);
            -webkit-animation: load8 1.1s infinite linear;
            animation: load8 1.1s infinite linear;
        }
        @-webkit-keyframes load8 {
            0% {
                -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
            }
            100% {
                -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
            }
        }
        @keyframes load8 {
            0% {
                -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
            }
            100% {
                -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
            }
        }
        #loadingDiv {
            position:absolute;;
            top:0;
            left:0;
            width:100%;
            height:100%;
            background-color:#000;
        }
This script will add a div that covers the entire window as the page loads. It will show a CSS-only loading spinner automatically. It will wait until the window (not the document) finishes loading.

  <ul>
    <li>Works with jQuery 3, which has a new window load event</li>
    <li>No image needed but it's easy to add one</li>
    <li>Change the delay for branding or instructions</li>
    <li>Only dependency is jQuery.</li>
  </ul>

Place the script below at the bottom of the body.

CSS loader code from https://projects.lukehaas.me/css-loaders

<!-- Place the script below at the bottom of the body -->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>











Share



                    Follow
                








edited Aug 6, 2019 at 13:10












        answered Jan 18, 2017 at 22:58





Victor StoddardVictor Stoddard

3,57422 gold badges2727 silver badges2727 bronze badges







6










How to add this for imag tags?

– Mano M

Feb 21, 2019 at 8:03






1




@ManoM $(window).on("load", handler) fires when all DOM objects finished loading, including images, scripts, even iframes. If you want to wait for a specific image to load, use $('#imageId').on("load", handler)

– Victor Stoddard

Feb 22, 2019 at 0:59










This for me is only working when the page first loads, i.e. when the browser/tab is opened or refreshed. However, it does not show up when the page is loading after it has been opened. I have a page with toggles showing different contents and when toggling between contents it takes a while to load. Is there a way in which I could adapt this same code to load not only the first time the page is opened but every time it is taking a while to load?

– Joehat

Dec 6, 2019 at 18:08






1




@Joehat replace $( "#loadingDiv" ).remove(); with $( "#loadingDiv" ).hide(); and add $( "#loadingDiv" ).show(); before setTimeout(removeLoader, 2000);. I had the div removed to make the page more lightweight, but this fix makes it reusable.

– Victor Stoddard

Dec 7, 2019 at 17:12













I tried your code.. It's strange. When I call my page it shows a blank page (it's loading content). After few seconds (I think contents are loaded) it shows the loader for 2 seconds, than it shows the full page. You can take a look: criferrara.it/crigest/toshiba

– sunlight76

Jan 17, 2020 at 18:55







 | 
Show 1 more comment













            37
        



















window.onload = function(){ document.getElementById("loading").style.display = "none" }
#loading {width: 100%;height: 100%;top: 0px;left: 0px;position: fixed;display: block; z-index: 99}

#loading-image {position: absolute;top: 40%;left: 45%;z-index: 100} 
<div id="loading">
<img id="loading-image" src="img/loading.gif" alt="Loading..." />
</div>  



Page loading image with simplest fadeout effect created in JS:








Share



                    Follow
                








edited Feb 4, 2019 at 12:33





Ced

1,23344 gold badges2020 silver badges3434 bronze badges







        answered Oct 7, 2012 at 10:14





Dariusz JDariusz J

55866 silver badges1111 bronze badges














Add a comment
 | 


















            10
        

















I have another below simple solution for this which perfectly worked for me. 
First of all, create a CSS with name Lockon class which is transparent overlay along with loading GIF as shown below 
.LockOn {
    display: block;
    visibility: visible;
    position: absolute;
    z-index: 999;
    top: 0px;
    left: 0px;
    width: 105%;
    height: 105%;
    background-color:white;
    vertical-align:bottom;
    padding-top: 20%; 
    filter: alpha(opacity=75); 
    opacity: 0.75; 
    font-size:large;
    color:blue;
    font-style:italic;
    font-weight:400;
    background-image: url("../Common/loadingGIF.gif");
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-position: center;
}

Now we need to create our div with this class which cover entire page as an overlay whenever the page is getting loaded
<div id="coverScreen"  class="LockOn">
</div>

Now we need to hide this cover screen whenever the page is ready and so that we can restrict the user from clicking/firing any event until the page is ready
$(window).on('load', function () {
$("#coverScreen").hide();
});

Above solution will be fine whenever the page is loading.
Now the question is after the page is loaded, whenever we click a button or an event which will take a long time, we need to show this in the client click event as shown below
$("#ucNoteGrid_grdViewNotes_ctl01_btnPrint").click(function () {
$("#coverScreen").show();
});

That means when we click this print button (which will take a long time to give the report) it will show our cover screen with GIF which gives  result and once the page is ready above windows on load function will fire and which hide the cover screen once the screen is fully loaded. 








Share



                    Follow
                








edited Jul 3, 2018 at 7:28





Roshana Pitigala

8,28788 gold badges4747 silver badges7777 bronze badges







        answered Jul 17, 2017 at 11:26





Rinoy AshokanRinoy Ashokan

1,4511616 silver badges1414 bronze badges







2






2




Great! only had to use these to make it full screen  position:fixed; width: 100vw; height:100vh;

– boateng

Nov 20, 2017 at 20:22










Sorry, but what are you reffering at with $("#ucNoteGrid_grdViewNotes_ctl01_btnPrint")

– user2478262

Oct 28, 2021 at 15:28






Add a comment
 | 














            6
        

















Default the contents to display:none and then have an event handler that sets it to display:block or similar after it's fully loaded. Then have a div that's set to display:block with "Loading" in it, and set it to display:none in the same event handler as before.








Share



                    Follow
                








        answered Dec 5, 2009 at 22:28





AmberAmber

499k8282 gold badges622622 silver badges548548 bronze badges







2






2




what event would you use to do this? Javascript page load? or is there a better place?

– Miles

Dec 5, 2009 at 22:29










Depends on if you have other JS doing setup stuff for the page - if so, call it after those are done, if not, then document onload works fine.

– Amber

Dec 5, 2009 at 22:30






Add a comment
 | 














            3
        

















Here's the jQuery I ended up using, which monitors all ajax start/stop, so you don't need to add it to each ajax call:
$(document).ajaxStart(function(){
    $("#loading").removeClass('hide');
}).ajaxStop(function(){
    $("#loading").addClass('hide');
});

CSS for the loading container & content (mostly from mehyaa's answer), as well as a hide class:
#loading {
   width: 100%;
   height: 100%;
   top: 0px;
   left: 0px;
   position: fixed;
   display: block;
   opacity: 0.7;
   background-color: #fff;
   z-index: 99;
   text-align: center;
}

#loading-content {
  position: absolute;
  top: 50%;
  left: 50%;
  text-align: center;
  z-index: 100;
}

.hide{
  display: none;
}

HTML:
<div id="loading" class="hide">
  <div id="loading-content">
    Loading...
  </div>
</div>









Share



                    Follow
                








edited Mar 7, 2016 at 12:55












        answered Mar 4, 2016 at 16:39





rybo111rybo111

12.1k44 gold badges6161 silver badges6969 bronze badges







1










The problem is, if i have a ajax loaded autocomplete in a input, the loader will appear.

– Lucas

Jun 9, 2017 at 14:08






Add a comment
 | 














            2
        

















Well, this largely depends on how you're loading the elements needed in the 'intensive call', my initial thought is that you're doing those loads via ajax.  If that's the case, then you could use the 'beforeSend' option and make an ajax call like this:
$.ajax({
  type: 'GET',
  url: "some.php",
  data: "name=John&location=Boston",

  beforeSend: function(xhr){           <---- use this option here
     $('.select_element_you_want_to_load_into').html('Loading...');
  },

  success: function(msg){
     $('.select_element_you_want_to_load_into').html(msg);
  }
});

EDIT
I see, in that case, using one of the 'display:block'/'display:none' options above in conjunction with $(document).ready(...) from jQuery is probably the way to go. The $(document).ready() function waits for the entire document structure to be loaded before executing (but it doesn't wait for all media to load). You'd do something like this:
$(document).ready( function() {
  $('table#with_slow_data').show();
  $('div#loading image or text').hide();
});









Share



                    Follow
                








edited Aug 26, 2015 at 12:18





ann

57811 gold badge99 silver badges1919 bronze badges







        answered Dec 5, 2009 at 22:41





btellesbtelles

5,38077 gold badges4646 silver badges7777 bronze badges







3










unfortunatly it's not through ajax, it's waiting for the php script to prepare the data from the database, so some of the html elements are loaded then the browser waits for the table of data before loading the rest.  Which could look as if the page has stalled, so need something displayed there to show that "something is happening" and not cause the user to move away...

– Shadi Almosri

Dec 7, 2009 at 0:22










FYI: The principle of the web (without ajax) is that a server renders an entire page serverside and on completion it sends this result (html) to the browser. If the rendering of the page is halted somewhere in the middle (while you can see the page appearing in the browser), it can't be a php script, because php only runs  serverside.

– Peter

Sep 1, 2010 at 12:00










See my answer to avoid adding beforeSend and success to each ajax call.

– rybo111

Mar 4, 2016 at 17:12






Add a comment
 | 














            2
        

















My blog will work 100 percent.


function showLoader()
{
    $(".loader").fadeIn("slow");
}
function hideLoader()
{
    $(".loader").fadeOut("slow");
}
.loader {
    position: fixed;
    left: 0px;
    top: 0px;
    width: 100%;
    height: 100%;
    z-index: 9999;
    background: url('pageLoader2.gif') 50% 50% no-repeat rgb(249,249,249);
    opacity: .8;
}
<div class="loader"></div>











Share



                    Follow
                








edited Sep 16, 2022 at 1:37





developer033

23.8k88 gold badges8181 silver badges108108 bronze badges







        answered Oct 17, 2017 at 8:36





Jitendra PatelJitendra Patel

511010 bronze badges







1






1




That <div> tag there is not closed

– sdbbs

Sep 1, 2021 at 7:53






Add a comment
 | 














            1
        

















Create a <div> element that contains your loading message, give the <div> an ID, and then when your content has finished loading, hide the <div>:
$("#myElement").css("display", "none");

...or in plain JavaScript:
document.getElementById("myElement").style.display = "none";









Share



                    Follow
                








        answered Dec 5, 2009 at 22:34





Steve HarrisonSteve Harrison

119k1515 gold badges8686 silver badges7272 bronze badges







1










Simple and gets the job done. From a readability perspective isn't $("#myElement").hide() easier on the eyes?

– user3613932

May 16, 2019 at 1:25






Add a comment
 | 














            1
        

















This will be in synchronisation with an api call, When the api call is triggered, the loader is shown. When the api call is succesful, the loader is removed. This can be used for either page load or during an api call.
  $.ajax({
    type: 'GET',
    url: url,
    async: true,
    dataType: 'json',
    beforeSend: function (xhr) {
      $( "<div class='loader' id='searching-loader'></div>").appendTo("#table-playlist-section");
      $("html, body").animate( { scrollTop: $(document).height() }, 100);
    },
    success: function (jsonOptions) {
      $('#searching-loader').remove();
      .
      .
    }
  });

CSS
.loader {
  border: 2px solid #f3f3f3;
  border-radius: 50%;
  border-top: 2px solid #3498db;
  width: 30px;
  height: 30px;
  margin: auto;
  -webkit-animation: spin 2s linear infinite; /* Safari */
  animation: spin 2s linear infinite;
  margin-top: 35px;
  margin-bottom: -35px;
}

/* Safari */
@-webkit-keyframes spin {
  0% { -webkit-transform: rotate(0deg); }
  100% { -webkit-transform: rotate(360deg); }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}









Share



                    Follow
                








        answered Jun 1, 2020 at 0:02





london_utkulondon_utku

94322 gold badges1212 silver badges3333 bronze badges














Add a comment
 | 














            1
        

















for drupal in your theme
custom_theme.theme file
function custom_theme_preprocess_html(&$variables) {
$variables['preloader'] = 1;
}

In html.html.twig file after skip main content link in body
{% if preloader %} 
  <div id="test-preloader" >
    <div id="preloader-inner" class="cssload-container">
      <div class="wait-text">{{ 'Please wait...'|t }} </div> 
      <div class="cssload-item cssload-moon"></div>
    </div>
  </div>
{% endif %}  

in css file
#test-preloader {
position: fixed;
background: white;
width: 100%;
height: 100%;
top: 0;
left: 0;
z-index: 9999;
}
.cssload-container .wait-text {
text-align: center;
padding-bottom: 15px;
color: #000;
}

.cssload-container .cssload-item {
 margin: auto;
 position: absolute;
 top: 0;
 right: 0;
 bottom: 0;
 left: 0;
 width: 131px;
 height: 131px;
 background-color: #fff;
 box-sizing: border-box;
 -o-box-sizing: border-box;
 -ms-box-sizing: border-box;
 -webkit-box-sizing: border-box;
 -moz-box-sizing: border-box;
 box-shadow: 0 0 21px 3px rgba(130, 130, 130, 0.26);
 -o-box-shadow: 0 0 21px 3px rgba(130, 130, 130, 0.26);
 -ms-box-shadow: 0 0 21px 3px rgba(130, 130, 130, 0.26);
 -webkit-box-shadow: 0 0 21px 3px rgba(130, 130, 130, 0.26);
 -moz-box-shadow: 0 0 21px 3px rgba(130, 130, 130, 0.26);
 }

.cssload-container .cssload-moon {
border-bottom: 26px solid #008AFA;
border-radius: 50%;
-o-border-radius: 50%;
-ms-border-radius: 50%;
-webkit-border-radius: 50%;
-moz-border-radius: 50%;
animation: spin 1.45s ease infinite;
-o-animation: spin 1.45s ease infinite;
-ms-animation: spin 1.45s ease infinite;
-webkit-animation: spin 1.45s ease infinite;
-moz-animation: spin 1.45s ease infinite;
 }









Share



                    Follow
                








        answered Jun 23, 2020 at 9:16





PradeepPradeep

31744 silver badges99 bronze badges














Add a comment
 | 














            1
        

















I needed a splash screen, which I implemented by reusing parts of the solutions listed here. It uses Vanilla JS for full backwards-compatibility.
Step 1: Add a background with a spinner gif on top of the page, then remove them when everything is loaded.
body.has-js::before {
  content: '';
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: 10;
  height: 100vh;
  width: 100vw;
  pointer-events: none;
  transition: all .2s;
  background: white url('/img/spinner.gif') no-repeat center center / 50px;
}
body.loaded::before {
  opacity: 0;
  width: 0;
  height: 0;
}

Step 2: Add a little script right after the opening body tag to start displaying the load/splash screen.
<body>
  <script>
    // Only show loader if JS is available
    document.body.className += ' has-js';
    // Option 1: Hide loader when 'load' event fires
    window.onload = function() { document.body.className += ' loaded'; }
    // Option 2: Hide loader after 2 seconds, in case the 'load' event never fires
    setTimeout(function(){ document.body.className += ' loaded'; }, 1000 * 2);
  </script>
  <!-- Page content goes after this -->
</body>









Share



                    Follow
                








        answered Jun 4, 2021 at 13:06





GoulvenGoulven

7571010 silver badges2020 bronze badges







0






Add a comment
 | 














            0
        

















Based on @mehyaa answer, but much shorter:
HTML (right after <body>):
<img id = "loading" src = "loading.gif" alt = "Loading indicator">

CSS:
#loading {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 32px;
  height: 32px;
  /* 1/2 of the height and width of the actual gif */
  margin: -16px 0 0 -16px;
  z-index: 100;
  }

Javascript (jQuery, since I'm already using it):
$(window).load(function() {
  $('#loading').remove();
  });









Share



                    Follow
                








        answered Jun 3, 2014 at 23:14





Francisco PresenciaFrancisco Presencia

8,68366 gold badges4747 silver badges9090 bronze badges







1






2




It's better to hide() the element rather than remove() it, so that you can re-use it.

– rybo111

Mar 4, 2016 at 14:56






Add a comment
 | 













Highly active question. Earn 10 reputation (not counting the association bonus) in order to answer this question. The reputation requirement helps protect this question from spam and non-answer activity.                    






Not the answer you're looking for? Browse other questions tagged javascriptjqueryhtmldomloader or ask your own question.                                







                            The Overflow Blog
                        


 

Can Stack Overflow save the day?




 

Let’s talk large language models (Ep. 546)



                            Featured on Meta
                        


 

We've added a "Necessary cookies only" option to the cookie consent popup




 

The Stack Exchange reputation system: What's working? What's not?




 

Launching the CI/CD and R Collectives and community editing features for...




 

Staging Ground Beta 1 Recap, and Reviewers needed for Beta 2




 

Temporary policy: ChatGPT is banned












 
Linked



2

Loading screen using jquery



-1

'no image' icon while outputting AJAX-delivered content



0

SetTimeout Loader Animation Site



17

Django - show loading message during long processing



6

How to create a loader in Javascript waiting for a function to end?



4

Implementing a loading spinning wheel in javascript



3

using fadeOut() or hide() to fade/hide Bootstrap 4 spinner/loader when browser window is completely loaded



2

Enable "open in new tab/window" in right click



2

show a loading image while a table is being built in a part of the html



1

Add loading image after click the `register` button in Laravel 8


See more linked questions




Related



2637

Make a div fill the height of the remaining screen space



4347

How do I copy to the clipboard in JavaScript?



1579

How do I find out which DOM element has the focus?



2924

How do I modify the URL without reloading the page?



4994

How do I make the first letter of a string uppercase in JavaScript?



2615

How to make a div 100% height of the browser window



2387

Get the size of the screen, current web page and browser window



2706

How do I refresh a page using JavaScript?



6560

How do I return the response from an asynchronous call?







            Hot Network Questions
        




                    Was Silicon Valley Bank's failure due to "Trump-era deregulation", and/or do Democrats share blame for it?
                



                    Is it OK practice to start a car while it's on jackstands?
                



                    Can a bank sue someone that starts a bank run that destroys the bank?
                



                    14 "Trashed" bikes acquired for free. Worth repairing and reselling? What do I look for?
                



                    Why would a fighter drop fuel into a drone?
                



                    Where can I create nice looking graphics for a paper?
                



                    Definition of "Direction" in Divination Context
                



                    What should I call the "important" values of x?
                



                    Is it safe to have an unused bulb socket in my ceiling fan?
                



                    What are the black pads stuck to the underside of a sink?
                



                    How are the banks behind high yield savings accounts able to pay such high rates?
                



                    How can I heat my buildings without fire in a low-fantasy setting?
                



                    If a man's name is on the birth certificate, but all were aware that he is not the blood father, and the couple separates, is he responsible legally?
                



                    What is the cause of the constancy of the speed of light in vacuum?
                



                    Problem Solving in Freefall
                



                    Are there any other examples where "weak" and "strong" are confused in mathematics?
                



                    Where on Earth is this background image in Windows from?
                



                    Explain Like I'm 5 How Oath Spells Work (D&D 5e)
                



                    Can I wait airside at Melbourne (MEL) until midnight before passing immigration?
                



                    How should I say "3 2 1 go!" in German?
                



                    Is "inauthentic" inauthentic?
                



                    In Ratatouille, did Linguini have a legally legitimate reason to fire Skinner?
                



                    Portable Alternatives to Traditional Keyboard/Mouse Input
                



                    Are right hand patterns allowed at any airport with approval?
                



            more hot questions
        




            Question feed
        




                Subscribe to RSS
            



                        Question feed
                        To subscribe to this RSS feed, copy and paste this URL into your RSS reader.















default











Stack Overflow

Questions
Help



Products

Teams
Advertising
Collectives
Talent



Company

About
Press
Work Here
Legal
Privacy Policy
Terms of Service
Contact Us
Cookie Settings
Cookie Policy




Stack Exchange Network



                                    Technology
                                



                                    Culture & recreation
                                



                                    Life & arts
                                



                                    Science
                                



                                    Professional
                                



                                    Business
                                



                                    API
                                



                                    Data
                                







Blog
Facebook
Twitter
LinkedIn
Instagram


Site design / logo © 2023 Stack Exchange Inc; user contributions licensed under CC BY-SA.                    rev 2023.3.17.43321














                        Your privacy
                    

                        By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.
                    


                            Accept all cookies
                        

                            Necessary cookies only
                        



                            Customize settings
                        





 

LilianovrawahFollowAug 4, 2020·2 min readHow Browsers load and display web pagesHi everyone here, in this article I will be talking about the browser, how it load and display pages.There are different steps taken for a browser to display a webpage;A request has to be made by clicking on a link or refreshing a web page.The pages(documents) and its resource(css, image, javascript) files are downloaded.The web browser uses the page resources to build the pageThe page is then rendered to the user on the browser.We will be taking an in depth look at the steps listed above.Technically, the points listed above can also be referred to asRequestResponseBuildRenderThe period when a webpage is requested is known as navigation start. A request is made for a document when a link is clicked. That document is a webpage file which is a text file located in a web server.ResponseThe response, is simply the browser receiving what it has requested for.Assuming the document is a .html file, the web browser requests document, the web server provides document requested for.Most webpages have resources file which is mostly the images, css and javascript. For the web browser to display the document, it has to get the resource files linked in the document.Once a document is received by the web browser it reads the file to find resources referenced by the page and when found, a request for the resource files is made by the web browser to the web server.Path to which document is displayedGet document ->Get resources -> parse -> display webpagebrowser downloads the html filebrowser reads the html and sees that there are one css file, one javascript file and one imagebrowser starts downloading the imagebrowser decides it can not display the webpage without first getting the css and javascriptbrowser downloads the CSS file and reads it to make sure nothing else is being calledbrowser decides it still can not display the webpage yet until it has the javascriptbrowser downloads the javascript file and reads it to make sure nothing else is being calledBrowser now decides it can display the webpage.The path above is for a very simple webpage, now image what your path must look like.BuildOnce the web browser gets the resources it starts building. The combination of the document which is sometimes the .html file and the info from the resource files.There are basically three steps that the browser takes to build a page.Build the DOMBuild the CSSOMBuild the Render TreeDOM simply means document object map. It is a map of where things are displayed on a page according to the html file.CSSOM simply means css object map. A map of where styles will be applied to different parts of the page.The render tree takes the DOM and the CSSOM and combines them to create a full map of how the page will actually be displayed.TechWeb Development----2More from LilianovrawahFollowAboutHelpTermsPrivacyGet the Medium appGet unlimited accessLilianovrawahFollowHelpStatusWritersBlogCareersPrivacyTermsAboutText to speech







































Skip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allMDN PlusMDN PlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb performancePopulating the page: how browsers workArticle ActionsEnglish (US)In this articleOverviewNavigationResponseParsingRenderInteractivitySee also
Animation performance and frame rateCSS and JavaScript animation performanceCritical rendering pathLazy loadingNavigation and resource timingsOptimizing startup performancePerformance Monitoring: RUM vs. synthetic monitoringPerformance budgetsPerformance fundamentalsPopulating the page: how browsers workRecommended Web Performance Timings: How long is too long?Understanding latencyUsing dns-prefetch
In this articleOverviewNavigationResponseParsingRenderInteractivitySee alsoPopulating the page: how browsers workUsers want web experiences with content that is fast to load and smooth to interact with. Therefore, a developer should strive to achieve these two goals.
To understand how to improve performance and perceived performance, it helps to understand how the browser works.OverviewFast sites provide better user experiences. Users want and expect web experiences with content that is fast to load and smooth to interact with.
Two major issues in web performance are issues having to do with latency and issues having to do with the fact that for the most part, browsers are single-threaded.
Latency is the biggest threat to our ability to ensure a fast-loading page. It is the developers' goal to make the site load as fast as possible — or at least appear to load super fast — so the user gets the requested information as quickly as possible. Network latency is the time it takes to transmit bytes over the air to computers. Web performance is what we have to do to make the page load as quickly as possible.
For the most part, browsers are considered single-threaded. That is, they execute a task from beginning to end before taking up another task. For smooth interactions, the developer's goal is to ensure performant site interactions, from smooth scrolling to being responsive to touch. Render time is key, with ensuring the main thread can complete all the work we throw at it and still always be available to handle user interactions. Web performance can be improved by understanding the single-threaded nature of the browser and minimizing the main thread's responsibilities, where possible and appropriate, to ensure rendering is smooth and responses to interactions are immediate.NavigationNavigation is the first step in loading a web page. It occurs whenever a user requests a page by entering a URL into the address bar, clicking a link, submitting a form, as well as other actions.
One of the goals of web performance is to minimize the amount of time a navigation takes to complete. In ideal conditions, this usually doesn't take too long, but latency and bandwidth are foes which can cause delays.DNS LookupThe first step of navigating to a web page is finding where the assets for that page are located. If you navigate to https://example.com, the HTML page is located on the server with IP address of 93.184.216.34. If you've never visited this site, a DNS lookup must happen.
Your browser requests a DNS lookup, which is eventually fielded by a name server, which in turn responds with an IP address. After this initial request, the IP will likely be cached for a time, which speeds up subsequent requests by retrieving the IP address from the cache instead of contacting a name server again.
DNS lookups usually only need to be done once per hostname for a page load. However, DNS lookups must be done for each unique hostname the requested page references. If your fonts, images, scripts, ads, and metrics all have different hostnames, a DNS lookup will have to be made for each one.



This can be problematic for performance, particularly on mobile networks. When a user is on a mobile network, each DNS lookup has to go from the phone to the cell tower to reach an authoritative DNS server. The distance between a phone, a cell tower, and the name server can add significant latency.TCP HandshakeOnce the IP address is known, the browser sets up a connection to the server via a TCP three-way handshake. This mechanism is designed so that two entities attempting to communicate—in this case the browser and web server—can negotiate the parameters of the network TCP socket connection before transmitting data, often over HTTPS.
TCP's three-way handshaking technique is often referred to as "SYN-SYN-ACK"—or more accurately SYN, SYN-ACK, ACK—because there are three messages transmitted by TCP to negotiate and start a TCP session between two computers. Yes, this means three more messages back and forth between each server, and the request has yet to be made.TLS NegotiationFor secure connections established over HTTPS, another "handshake" is required. This handshake, or rather the TLS negotiation, determines which cipher will be used to encrypt the communication, verifies the server, and establishes that a secure connection is in place before beginning the actual transfer of data. This requires three more round trips to the server before the request for content is actually sent.



While making the connection secure adds time to the page load, a secure connection is worth the latency expense, as the data transmitted between the browser and the web server cannot be decrypted by a third party.
After the 8 round trips, the browser is finally able to make the request.ResponseOnce we have an established connection to a web server, the browser sends an initial HTTP GET request on behalf of the user, which for websites is most often an HTML file. Once the server receives the request, it will reply with relevant response headers and the contents of the HTML.
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8" />
    <title>My simple page</title>
    <link rel="stylesheet" href="styles.css" />
    <script src="myscript.js"></script>
  </head>
  <body>
    <h1 class="heading">My Page</h1>
    <p>A paragraph with a <a href="https://example.com/about">link</a></p>
    <div>
      <img src="myimage.jpg" alt="image description" />
    </div>
    <script src="anotherscript.js"></script>
  </body>
</html>

This response for this initial request contains the first byte of data received. Time to First Byte (TTFB) is the time between when the user made the request—say by clicking on a link—and the receipt of this first packet of HTML. The first chunk of content is usually 14KB of data.
In our example above, the request is definitely less than 14KB, but the linked resources aren't requested until the browser encounters the links during parsing, described below.TCP Slow Start / 14KB ruleThe first response packet will be 14KB. This is part of TCP slow start, an algorithm which balances the speed of a network connection. Slow start gradually increases the amount of data transmitted until the network's maximum bandwidth can be determined.
In TCP slow start, after receipt of the initial packet, the server doubles the size of the next packet to around 28KB. Subsequent packets increase in size until a predetermined threshold is reached, or congestion is experienced.



If you've ever heard of the 14KB rule for initial page load, TCP slow start is the reason why the initial response is 14KB, and why web performance optimization calls for focusing optimizations with this initial 14KB response in mind. TCP slow start gradually builds up transmission speeds appropriate for the network's capabilities to avoid congestion.Congestion controlAs the server sends data in TCP packets, the user's client confirms delivery by returning acknowledgements, or ACKs. The connection has a limited capacity depending on hardware and network conditions. If the server sends too many packets too quickly, they will be dropped. Meaning, there will be no acknowledgement. The server registers this as missing ACKs. Congestion control algorithms use this flow of sent packets and ACKs to determine a send rate.ParsingOnce the browser receives the first chunk of data, it can begin parsing the information received. Parsing is the step the browser takes to turn the data it receives over the network into the DOM and CSSOM, which is used by the renderer to paint a page to the screen.
The DOM is the internal representation of the markup for the browser. The DOM is also exposed, and can be manipulated through various APIs in JavaScript.
Even if the requested page's HTML is larger than the initial 14KB packet, the browser will begin parsing and attempting to render an experience based on the data it has. This is why it's important for web performance optimization to include everything the browser needs to start rendering a page, or at least a template of the page - the CSS and HTML needed for the first render — in the first 14 kilobytes. But before anything is rendered to the screen, the HTML, CSS, and JavaScript have to be parsed.Building the DOM treeWe describe five steps in the critical rendering path.
The first step is processing the HTML markup and building the DOM tree. HTML parsing involves tokenization and tree construction. HTML tokens include start and end tags, as well as attribute names and values. If the document is well-formed, parsing it is straightforward and faster. The parser parses tokenized input into the document, building up the document tree.
The DOM tree describes the content of the document. The <html> element is the first tag and root node of the document tree. The tree reflects the relationships and hierarchies between different tags. Tags nested within other tags are child nodes. The greater the number of DOM nodes, the longer it takes to construct the DOM tree.



When the parser finds non-blocking resources, such as an image, the browser will request those resources and continue parsing. Parsing can continue when a CSS file is encountered, but <script> tags—particularly those without an async or defer attribute—block rendering, and pause the parsing of HTML. Though the browser's preload scanner hastens this process, excessive scripts can still be a significant bottleneck.Preload scannerWhile the browser builds the DOM tree, this process occupies the main thread. As this happens, the preload scanner will parse through the content available and request high priority resources like CSS, JavaScript, and web fonts. Thanks to the preload scanner, we don't have to wait until the parser finds a reference to an external resource to request it. It will retrieve resources in the background so that by the time the main HTML parser reaches requested assets, they may already be in flight, or have been downloaded. The optimizations the preload scanner provides reduce blockages.
<link rel="stylesheet" href="styles.css" />
<script src="myscript.js" async></script>
<img src="myimage.jpg" alt="image description" />
<script src="anotherscript.js" async></script>

In this example, while the main thread is parsing the HTML and CSS, the preload scanner will find the scripts and image, and start downloading them as well. To ensure the script doesn't block the process, add the async attribute, or the defer attribute if JavaScript parsing and execution order is important.
Waiting to obtain CSS doesn't block HTML parsing or downloading, but it does block JavaScript, because JavaScript is often used to query CSS properties' impact on elements.Building the CSSOMThe second step in the critical rendering path is processing CSS and building the CSSOM tree. The CSS object model is similar to the DOM. The DOM and CSSOM are both trees. They are independent data structures. The browser converts the CSS rules into a map of styles it can understand and work with. The browser goes through each rule set in the CSS, creating a tree of nodes with parent, child, and sibling relationships based on the CSS selectors.
As with HTML, the browser needs to convert the received CSS rules into something it can work with. Hence, it repeats the HTML-to-object process, but for the CSS.
The CSSOM tree includes styles from the user agent style sheet. The browser begins with the most general rule applicable to a node and recursively refines the computed styles by applying more specific rules. In other words, it cascades the property values.
Building the CSSOM is very, very fast and is not displayed in a unique color in current developer tools. Rather, the "Recalculate Style" in developer tools shows the total time it takes to parse CSS, construct the CSSOM tree, and recursively calculate computed styles. In terms of web performance optimization, there are lower hanging fruit, as the total time to create the CSSOM is generally less than the time it takes for one DNS lookup.Other ProcessesJavaScript Compilation
While the CSS is being parsed and the CSSOM created, other assets, including JavaScript files, are downloading (thanks to the preload scanner). JavaScript is interpreted, compiled, parsed and executed. The scripts are parsed into abstract syntax trees. Some browser engines take the Abstract Syntax Tree and pass it into an interpreter, outputting bytecode which is executed on the main thread. This is known as JavaScript compilation.
Building the Accessibility Tree
The browser also builds an accessibility tree that assistive devices use to parse and interpret content. The accessibility object model (AOM) is like a semantic version of the DOM. The browser updates the accessibility tree when the DOM is updated. The accessibility tree is not modifiable by assistive technologies themselves.
Until the AOM is built, the content is not accessible to screen readers.RenderRendering steps include style, layout, paint and, in some cases, compositing. The CSSOM and DOM trees created in the parsing step are combined into a render tree which is then used to compute the layout of every visible element, which is then painted to the screen. In some cases, content can be promoted to their own layers and composited, improving performance by painting portions of the screen on the GPU instead of the CPU, freeing up the main thread.StyleThe third step in the critical rendering path is combining the DOM and CSSOM into a render tree. The computed style tree, or render tree, construction starts with the root of the DOM tree, traversing each visible node.
Tags that aren't going to be displayed, like the <head> and its children and any nodes with display: none, such as the script { display: none; } you will find in user agent stylesheets, are not included in the render tree as they will not appear in the rendered output. Nodes with visibility: hidden applied are included in the render tree, as they do take up space. As we have not given any directives to override the user agent default, the script node in our code example above will not be included in the render tree.
Each visible node has its CSSOM rules applied to it. The render tree holds all the visible nodes with content and computed styles — matching up all the relevant styles to every visible node in the DOM tree, and determining, based on the CSS cascade, what the computed styles are for each node.LayoutThe fourth step in the critical rendering path is running layout on the render tree to compute the geometry of each node. Layout is the process by which the width, height, and location of all the nodes in the render tree are determined, plus the determination of the size and position of each object on the page. Reflow is any subsequent size and position determination of any part of the page or the entire document.
Once the render tree is built, layout commences. The render tree identified which nodes are displayed (even if invisible) along with their computed styles, but not the dimensions or location of each node. To determine the exact size and location of each object, the browser starts at the root of the render tree and traverses it.
On the web page, almost everything is a box. Different devices and different desktop preferences mean an unlimited number of differing viewport sizes. In this phase, taking the viewport size into consideration, the browser determines what the dimensions of all the different boxes are going to be on the screen. Taking the size of the viewport as its base, layout generally starts with the body, laying out the dimensions of all the body's descendants, with each element's box model properties, providing placeholder space for replaced elements it doesn't know the dimensions of, such as our image.
The first time the size and position of nodes are determined is called layout. Subsequent recalculations of node size and locations are called reflows. In our example, suppose the initial layout occurs before the image is returned. Since we didn't declare the size of our image, there will be a reflow once the image size is known.PaintThe last step in the critical rendering path is painting the individual nodes to the screen, the first occurrence of which is called the first meaningful paint. In the painting or rasterization phase, the browser converts each box calculated in the layout phase to actual pixels on the screen. Painting involves drawing every visual part of an element to the screen, including text, colors, borders, shadows, and replaced elements like buttons and images. The browser needs to do this super quickly.
To ensure smooth scrolling and animation, everything occupying the main thread, including calculating styles, along with reflow and paint, must take the browser less than 16.67ms to accomplish. At 2048 X 1536, the iPad has over 3,145,000 pixels to be painted to the screen. That is a lot of pixels that have to be painted very quickly. To ensure repainting can be done even faster than the initial paint, the drawing to the screen is generally broken down into several layers. If this occurs, then compositing is necessary.
Painting can break the elements in the layout tree into layers. Promoting content into layers on the GPU (instead of the main thread on the CPU) improves paint and repaint performance. There are specific properties and elements that instantiate a layer, including <video> and <canvas>, and any element which has the CSS properties of opacity, a 3D transform, will-change, and a few others. These nodes will be painted onto their own layer, along with their descendants, unless a descendant necessitates its own layer for one (or more) of the above reasons.
Layers do improve performance, but are expensive when it comes to memory management, so should not be overused as part of web performance optimization strategies.CompositingWhen sections of the document are drawn in different layers, overlapping each other, compositing is necessary to ensure they are drawn to the screen in the right order and the content is rendered correctly.
As the page continues to load assets, reflows can happen (recall our example image that arrived late). A reflow sparks a repaint and a re-composite. Had we defined the size of our image, no reflow would have been necessary, and only the layer that needed to be repainted would be repainted, and composited if necessary. But we didn't include the image size! When the image is obtained from the server, the rendering process goes back to the layout steps and restarts from there.InteractivityOnce the main thread is done painting the page, you would think we would be "all set." That isn't necessarily the case. If the load includes JavaScript, that was correctly deferred, and only executed after the onload event fires, the main thread might be busy, and not available for scrolling, touch, and other interactions.
Time to Interactive (TTI) is the measurement of how long it took from that first request which led to the DNS lookup and SSL connection to when the page is interactive — interactive being the point in time after the First Contentful Paint when the page responds to user interactions within 50ms. If the main thread is occupied parsing, compiling, and executing JavaScript, it is not available and therefore not able to respond to user interactions in a timely (less than 50ms) fashion.
In our example, maybe the image loaded quickly, but perhaps the anotherscript.js file was 2MB and our user's network connection was slow. In this case the user would see the page super quickly, but wouldn't be able to scroll without jank until the script was downloaded, parsed and executed. That is not a good user experience. Avoid occupying the main thread, as demonstrated in this WebPageTest example:



In this example, the DOM content load process took over 1.5 seconds, and the main thread was fully occupied that entire time, unresponsive to click events or screen taps.See also
Web Performance
Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 26, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutHacks BlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.Portions of this content are ©1998–2023 by individual mozilla.org contributors. Content available under a Creative Commons license.ServicesWhy JobsitySuccess StoriesPressAboutBlogCareersLoginContact UsXServicesWhy Jobsity Success Stories PressAboutBlogCareersContact UsLoginITHow to Create a Full-Screen Preloader Without Any LibraryIntroduction
As we get to create more and more complex, modern, and high-speed websites and web apps, we as website visitors can’t wait for a webpage to load for more than 4 seconds.
There is a separate debate on how fast should a website load, but thankfully designers and developers came together way back to find a bit of a middle road to fix the issue of not allowing the website visitor to skip or close the website window, but instead allowing them to wait for a couple of seconds until the entire webpage or a specific section loads.
In this CSS tutorial, we will be tackling this issue getting to know how to create a loader element that scales the full-screen of the webpage until the content behind it loads perfectly. And yes, it will only be using the barebones of the web i.e. HTML, CSS, and just a tiny bit of JavaScript.

What is a preloader?

Essentially, preloaders or simply ‘loaders’ are just some element(s) you see on the screen while the rest of the page’s content is still loading.

The content that’s loading can be both dynamic or static. However, preloaders/loaders are often seen on web apps where you might be shown a loading screen until your payment is processed. Check out the following image for reference:

They can come in all shapes and sizes and usually are created by a designer or a mico-interaction enthusiast from where it’s the job of a front-end developer like us to implement it on our webpage.
On a website, CSS preloaders are important interface elements that let visitors know that the website hasn’t crashed, it’s just processing data.
How to make a full-screen preloader?
Now there’s a slight difference between a normal loader/preloader and a full-screen preloader. Usually, these cover the entire width of the webpage and the actual loading animation is present at the center. They can be as simple as this infinity preloader:

Or ridiculously creative like this one for a ping-pong sports website:

But in our case, we will be making a breathing circle like preloader work as shown in the demo below:

As you can see here, first the preloader animates for a few seconds and when the content behind it is ready to load or show up, it goes away and we can now use the website.
A simple concept behind making such a preloader without any external libraries are these three steps:
1. We use the SVGs to get the actual loading animation working. It will be a spinner element that animates over a period of time. SVGs are scalable and implementing them is relatively easy.
2. We use CSS to add the styling of our preloader so that it sits perfectly at the center of our webpage no matter what viewport or size the browser window is.
3. We then use a bit of JavaScript code to hide the preloader and show the content behind it.
Let’s start with the markup
We first start with the actual content to show after the preloader stops. For that, we have the following HTML markup:
<div class="wrapper">
    <h1>🎥 Live video transcription</h1>
    <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Fugit necessitatibus, quod perspiciatis voluptatem veroece natus dolores eaque, consequatur perferendis sint ex, corrupti rerum.</p>
    <a href="#">Get started →</a>
</div>

As for the actual preloader markup, we need a preloader wrapper class that contains our GIF image. This will help us in positioning the preloader on the page perfectly as we need. Don’t forget to put the alt tag for accessibility:
<div class="preloader">
  <img src="https://link-to-image.gif" alt="spinner">
</div>

Make sure you put this code above the content code so that our HTML file contains the following:
<div class="preloader">
  <img src="https://link-to-image.gif" alt="spinner">
</div>
<div class="wrapper">
<h1>🎥 Live video transcription</h1>
<p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Fugit necessitatibus, quod perspiciatis voluptatem veroece natus dolores eaque, consequatur perferendis sint ex, corrupti rerum.</p>
<a href="#">Get started →</a>
</div>

Styling with CSS
You can style the content you want to show after the preloader stops to your liking. For this demo, we will skip to the styling of the preloader wrapper instead. This will be your CSS code for the preloader:
.preloader {
  align-items: center;
  background: #FFF;
  display: flex;
  height: 100vh;
  justify-content: center;
  left: 0;
  position: fixed;
  top: 0;
  transition: opacity 0.2s linear;
  width: 100%;
  z-index: 9999;
  opacity: 1;
  transform: opacity 1s linear;
}


Here, we use CSS Flexbox to display the preloader wrapper directly in the center of the screen with the align-items and justify-content properties.


With properties like height: 100vh and width: 100% we make sure that this element takes up the entire height and width of the current viewport.


Notice that we have given it a white background, so that it matches up the webpage’s actual background color. Along with this, making it of fixed position is crucial because with that if we scroll it won’t affect the loader’s location on the page.


The high z-index then ensures that no other element would stack on top of our preloader element blocking it from the view.


Finally, we can add a bit of transition and transforms on the opacity so that the process of fading in and out can be achieved for a better user experience.

Adding a bit of JavaScript magic
Let’s say you don’t like the current fading in and out transitions and you want to manually control the amount of time it takes for this animation.
For that, open up the JavaScript file of the current project, and let’s first grab the .preloader element:
const myPreloader = document.querySelector('.preloader');

Now we will create a custom fadeOutEffect function which is wrapped in setInterval() timeout method. We check the opacity property every 300 milliseconds to see if it’s greater than 0. If it is, then we decrease its value in 0.1 increments. This accounts for a smooth transition effect.
Once it hits the 0 opacity value, we clearInterval() to stop it from running indefinitely. Here’s how it looks like in code:
const fadeOutEffect = setInterval(() => {
  if (!preloader.style.opacity) {
    preloader.style.opacity = 1;
  }
  if (preloader.style.opacity > 0) {
    preloader.style.opacity -= 0.1;
  } else {
    clearInterval(fadeEffect);
  }
}, 300);

Don’t forget to call this function on the page load:
window.addEventListener('load', fadeOutEffect);


Conclusion
And with that, you got to know how to make a loader without using any CSS or JavaScript library! The main thing to note here is how CSS code is used to center the preloader and how we made it full-screen for any viewport. Also with JavaScript, we took it a step further and manually controlled the entire fade-out transition!
From here, you can refer to the following resources to better understand this topic:

Preloaders on Tumblr
How to Create Custom Loading Animations to Decrease Bounce Rates
Create your own animated loaders

--
If you want to stay up to date with all the new content we publish on our blog, share your email and hit the subscribe button.
Also, feel free to browse through the other sections of the blog where you can find many other amazing articles on: Programming, IT, Outsourcing, and even Management.
by Santiago Castro Apr 29, 2022With over +16 years of experience in the technology and software industry and +12 of those years at Jobsity, Santi has performed a variety of roles including UX/UI web designer, senior front-end developer, technical project manager, and account manager. Wearing all of these hats has provided him with a wide range of expertise and the ability to manage teams, create solutions, and understand industry needs. At present, he runs the Operations Department at Jobsity, creating a high-level strategy for the company's success and leading a team of more than 400 professionals in their work on major projects.Subscribe for updatesMain BlogITManagementTutorialsOutsourcingRelated articles10 Books All Software Developers Should ReadTake your tech career to the next level with this list of books that every software developer should read! Learn how to be a top superstar developer!...Mar 17, 2023 | Mauricio Lopez10 Tips for Becoming a Better Software DeveloperAn article presenting ten out-of-the-box tips for being a better software developer, from increasing soft skills to hard skills, technical skills, to human skills for maintaining your body and mind wh...Mar 17, 2023 | Mauricio Lopez10 UI Design Tools You Should Know AboutUser Interface (UI) design is a vital part of software development. It is often bundled together with User Experience (UX), but UI is more specifically about how a user views and interacts with a webs...Mar 17, 2023 | Andres GarzonLeave your worries about hiring & retaining costly developers behind.Contact UsWe provide you with top-level nearshore developers from around the worldNEW YORK HEADQUARTERS228 Park Ave SNew York, NY 10003(720) 329-9058hello@jobsity.comResourcesSuccess StoriesBlogContact UsServicesJava DevelopersReact DevelopersPython DevelopersDrupal DevelopersPHP DevelopersCloud Engineering.Net DevelopersUI/UX DesignersQA EngineersData EngineeringMeet JobsityAbout UsServicesWhy JobsityCost-Benefit AnalysisWhy Nearshore?Information Security PolicyPrivacy PolicyThe names and logos for Jobsity are registered trademarks of Jobsity, LLC. All text and design is Copyright © 2023
Skip to content


Log InRegister 







WordPress.org


 







NewsDownload & ExtendGet WordPressThemesPatternsPluginsOpenverseMobileHostingLearnLearn WordPressDocumentationForumsWordPress.tvDevelopersCommunityMake WordPressWordCampMeetupsPhoto DirectoryJob BoardFive for the FutureAboutAbout WordPressShowcaseGutenbergEnterpriseWordPress Swag StoreGet WordPress











Search









			Get WordPress		






Plugins




My Favorites
Beta Testing
Developers

Search for:

Search plugins












 

Download

Loading Page with Loading Screen
By CodePeople








Details
Reviews

Installation

Development


Support





Description
Loading Page with Loading Screen features:
→ Displays a screen showing loading percentage of a given page
→ Displays the page’s content with an animation after complete the loading process
→ Increase the WordPress performance
→ Allows to select the colors of the loading progress screen,
→ As background colors and images
→ Allows to display or remove the text showing the loading percentage
→ Pre-loads the page images
Loading Page with Loading Screen plugin performs a pre-loading of image on your website and displays a loading progress screen with percentage of completion. Once everything is loaded, the screen disappears.
More about the Main Features:

Displays a screen showing loading percentage of a given page. In heavy pages the “Loading Page with Loading Screen” plugin allows to know when the page appearance is ready.
Allows to display the loading screen on homepage only, or in all pages of website.
Allows to select the colors of the loading progress screen, or select images as background. By default the colour of loading screen is black, but it may be modified to adjust the look and feel of the loading screen with website’s design.
Allows to display or remove the text showing the loading percentage.

The base plugin, available for free from the WordPress Plugin Directory, has all the features you need to displays an loading screen on your website.
Premium Features:

Allows to choose a loading progress screen. The premium version of plugin includes multiple loading screens.
Special attention to the “Logo Screen”, that allows to use the website’s logo or any other image in the loading progress.
Allows to select from multiple possible animations, to display the page’s content after complete the loading process.
Improves the page performance.
Lazy Loading feature allows to load faster and reduce the bandwidth consumption. The images are big consumers of bandwidth and loading time, so a WordPress website with multiple images can improve its performance and reduce the loading time with the lazy loading feature.
Allows to select an image as a placeholder, to replace the real images during pre-loading. It’s recommended to select the lighter images possible to increase the WordPress performance, the image selected will be used instead of the original images, in the loading page process.

Demo of Premium Version of Plugin
https://demos.dwbooster.com/loading-page/wp-login.php
https://demos.dwbooster.com/loading-page/
What is Lazy Loading?
Lazy Loading means that the original images are not loaded until finalize the loading of page. This action improves the download speed of webpages.
If you want more information about this plugin or another one don’t doubt to visit my website:
http://wordpress.dwbooster.com
Interface
To use Loading Page with Loading Screen on your website, simply activate the plugin. If you wish to modify any of the default options, go to the plugin’s Settings. They can be found either by going to Settings > Loading Page on your WordPress dashboard, or by going to Plugins; a link to Settings can be found in the plugin description.
The Loading Page with Loading Screen setup is divided in two sections: the first one is dedicated to the activation and  setup of the loading screen, and the second to the delayed loading of the images that are not shown immediately ( images that require on-page scrolling in order to be seen).
Loading Screen Setup
The setup options for the loading screen are:

Enable loading screen: activates preloading of images and displays a loading screen while the webpage is loading.
Display the loading screen once per session: display the loading screen only once per session.
Display the loading screen on: display the loading screen with all screens sizes, or if the screens sizes satisfy the conditions.
Display loading screen only in: displays a loading screen only on homepage, all pages, or specific pages or posts. In the last case the IDs of pages or posts should be separated by comma symbol “,”
Devices: Allows selecting the devices where to show the loading screens (Desktop, Mobile, or Both).
Exclude the loading screen from: excludes the loading screen from pages or posts whose IDs are entered separated by comma symbol “,”
Select the loading screen: allows to choose a loading screen. The premium version of plugin include multiple loading screens.
Select background color: allows to select the background color for your loading screen compatible with the design guidelines of your website.
Select images as background: allows to display an image as loading screen background, the image can be displayed tiled or centered.
Display image in fullscreen: allows to adjust the background image in fullscreen mode.
Select foreground color: Allows to select the color of the graphics and texts that display the loading progress information.
Additional seconds: Allows to add seconds before remove the loading screen at the end of the load process.
Include an ad, or your own block of code: Allows to add ads, or other block of code, to the loading screen.
Apply the effect on page: Display the page’s content with an animation after complete the loading process.

Display loading percent: Shows the percentage of loading. The loading percent is calculated in function of images in the page.


Troubleshoot Area – Loading Screen: allows disabling/enabling the search in deep.


Lazy Loading Setup (in premium version only)
The options to set up Lazy Loading and increase the WordPress performance are:

Enable lazy loading: Enables the delayed loading of images outside of the current viewing area of the user improving the rendering time of complete page.

Select the image to load by default: Choose an image to be shown as a placeholder of the actual images, the loading of which will be delayed. It’s recommended the selection of a light image to increase the WordPress performance.


Troubleshoot Area – Lazy Loading: allows entering some texts to exclude the images tags with the entered texts in the classes or attributes.



Screenshots
Loading Page PreviewLoading Screen AvailableBenefits to use Lazy LoadPlugin Settings

Installation
To install Loading Page with Loading Screen, follow these steps:

Download the zipped plugin.
Go to the Plugins section on your WordPress dashboard.
Click on Add New.
Click on the Upload link.
Browse and locate the zipped plugin that you have just downloaded.
Once installed, activate the plugin by clicking on Activate.


FAQ


Q: What to do if the loading screen is stopping in determined percentage?


A: Tick the checkbox: “Disable the search in deep”, in the “Troubleshoot Area – Loading Screen” section of the settings page.


Q: How to use a custom image for the loading progress?


A: From the settings page of the plugin, selects the “Logo Screen” in the list of available screens (only in the pro version of the plugin), and select the image to use in the loading screen through the new input field associated to the “Logo Screen”.


Q: How the lazy loading increase the WordPress performance?


A: The lazy loading doesn’t load the website images until images be in the viewport. If the user never scrolls the webpage, some images won’t download with a reduction in the bandwidth consumption.


Q: I’ve installed a plugin for images galleries, that applies a lazy load to the images. How to prevent a conflict with the lazy loading of the “Loading Page” plugin?


A: Simply, identify a class name, or the value of an attribute applied to the images tags by the gallery, and enter the text through the attribute: “Exclude images whose tag includes the class or attribute” in the “Troubleshoot Area – Lazy Loading” section of settings page.


Q: Could I display the loading screen on homepage only?


A: Yes, that’s possible. Go to the settings page of plugin and check the option “homepage only”.


Q: Is possible display the loading screen in some pages only?


A: Yes, that’s possible. Go to the settings page of plugin and check the option “the specific pages”, and enter the posts or pages IDs, separated by the comma symbol “,”.


Q: Might I display an image as loading screen background?


A: Yes, that’s possible. Go to the settings page of plugin and select the image in the option “Select image as background”. The image can be displayed tiled or centred.


Q: Are the loading screens supported by all browsers?


A: There are some loading screens that require of the canvas object, all modern browsers include the canvas object. The screens with special requirements display a caveat text when are selected.


Q: Why can’t I see the animation effect after complete the loading screen?


A: Please be sure you are using a browser with CSS3 support.



Reviews



 


 One of the BEST


esmeemackenzie
February 13, 2023
1 reply


I have seen and tried many Loading pages - IMHO this is one of the best! it is easy to Install and to onderstaand and has many, many features. 



KUDO for you all Keep on growing and improving




 


 works perfectly


Larreth
February 8, 2023
1 reply


Love this plugin - works perfectly as advertised




 


 Works well.


graemejcox
January 11, 2023
1 reply


Works well.




 


 Great plugin


djks74
December 14, 2022
1 reply


Its very usefull,
hope it will remove some delay when loading to get improvement.

Thanks for the plugin.




 


 Work fine and its easy to config


tecladigital
November 17, 2022
2 replies


This plugin allows the loading icon after clicking on some link, not only when the page is loaded.




 


 Amazing tool


mukkino
October 30, 2022
2 replies


Does what it promises and it's free! Thank you!




			Read all 112 reviews		

Contributors & Developers
“Loading Page with Loading Screen” is open source software. The following people have contributed to this plugin.Contributors


 
					codepeople				


“Loading Page with Loading Screen” has been translated into 2 locales. Thank you to the translators for their contributions.Translate “Loading Page with Loading Screen” into your language.Interested in development?Browse the code, check out the SVN repository, or subscribe to the development log by RSS.

Changelog
1.0

First version released.

1.0.1

Improves the plugin documentation.
Performs a pre-loading of the images on your website, and displays a loading progress screen with percentage of completion.
Allows to display an image as background of the loading screen.
Allows to display the background image in fullscreen mode.
Associates effects to the page loaded.
Allows to display the loading screen only on homepage, all pages, or particular pages of website.
Corrects an issue with the resources loaded in Internet Explorer.
Reduces the interval of time to display the loading screen.
Corrects an issue with the percentage text in the loading screen.
Excludes some files from the loading process.

1.0.2

Includes the feature to display the loading screen once per session.
Includes the feature for excluding the loading screen from specific pages and posts.
Modifies the behavior of the lazy loading images.

1.0.3

Prevents the insertion multiple instances of the Loading Screen in a same page.

1.0.4

Improves the module for parsing the config.ini files of the loading screens.

1.0.5

Prevents to use the loading screen when the website is accessed from search crawlers or spiders.

1.0.6

Improves the loading screen process.

1.0.7

Optimizes the scripts in the admin section.

1.0.8

Modifies the settings interface.

1.0.9

Modifies the validation of the excluded pages to display the loading screen (thanks to WordPress member: publicusmordicus).

1.0.10

Improves the management of sessions, and the loading screen behavior.

1.0.11

Escape all attributes, SQL queries, and URL parameters, to prevent some vulnerabilities.

1.0.12

Modifies some deprecated jQuery functions.

1.0.13

Prevents that multiple instance of jQuery framework can overwrite the plugin’s code.

1.0.14

Assigns class names to the elements in the loading screen to allow more control over its appearance: lp-screen, lp-screen-text, lp-screen-graphic

1.0.15

Reimplements the loading screen to improve its behavior in all devices.
Includes the “Troubleshoot” sections for enabling/desabling the deep search, or exlude images from the lazy loading.

1.0.16

Allows to add seconds before remove the loading screen at the end of the load process.
Allows to add ads, or other block of code, to the loading screen.

1.0.17

Allows to control the loading screen based on the screens sizes.

1.0.18

Solves PHP notices in the settings page of the plugin.

1.0.19

Improves the loading screen when there are images defined as tags backgrounds.

1.0.20

Includes a new feature: Allow to display the loading screen once per page.

1.0.21

Fixes an issue in the module “loading screen once per page”.

1.0.22

Improves the access to the plugin documentation.

1.0.23

Modifies the module for accessing the WordPress reviews section.

1.0.24

Fixes an issue in the promote banner.

1.0.25

Modifies the module that includes the Ads in the loading screen.

1.0.26

Includes a new option in the plugin’s settings to allow remove the loading screen in the onload event of the window object, and not as soon as possible, like in the previous versions of the plugin.

1.0.27

Includes some changes in the loading screen’s design.
The professional version takes into account the “srcset” attributes for the lazy loading.
In the professional version the placeholder images are replaced sooner by the original ones.

1.0.28

Fixes an issue that clears the plugin’s settings when it is deactivated/activated.

1.0.29

The plugin check if exists the global function “afterCompleteLoadingScreen”, and calls it after the loading screen reach the 100%.

1.0.30

Fixes an issue with the loopback requests when are being edited the code of plugins or themes in the WordPress editor.

1.0.31

Modifies the activation/deactivation modules to facilitate both process.

1.0.32

Includes a new loading screen in the plugin.

1.0.33

Fixes a conflict with the Elementor editor.

1.0.34

Hides the promotion banner for the majority of roles and fixes a conflict between the promotion banner and the Gutenberg editor.

1.0.35

Modifies the loading screen logo.

1.0.36

Optimizes the loading screen to increase the speed.

1.0.37

The update causes the loading screen appears sooner.

1.0.38

Improves the code.
Removes the check for unnecessary elements.
Applies transparency to the loading screen background color.

1.0.39

Fixes a javascript error.

1.0.40

Includes a new attribute in the settings page of the plugin for controlling the transparency of the background color.

1.0.41

Removes redundant code.
Adds new styles.
Improves the loading screen appearance.

1.0.42

Fixes a conflict with autoptimize.

1.0.43

Fixes an issue with versions of WordPress previous to wp4.5
Replaces the animated gifs in the logo screen with svg, solving an issue with the antialias on gifs.

1.0.44

Fixes a conflict with the “Speed Booster Pack” plugin.

1.0.45

Fixes an issue detecting the singular pages.

1.0.46

Preloads the logo image when the “Logo Screen” is selected as loading screen.

1.0.47

Fixes an issue between the Promote Banner and the official distribution of WP5.0

1.0.48

Includes a close loading screen button.
In the logo screen, clicking on the logo image, closes the loading screen.
Improves the loading process.
Fixes some script errors.

1.0.49

Fixes a CSS issue.

1.0.50

Modifies the way the resources are loading to fix a conflict with the “Fast Velocity Minify” plugin.

1.0.51

Modifies some styles to allow redefine the logo size with CSS.

1.0.52

Modifies the language files and plugin headers.

1.0.53

Fixes an issue in the js code.

1.0.54

Satisfying the users’ requests, the Loading Page settings can be modified now only by the website’s administrators. As the loading screen can affect all website’s pages the responsability should be of the administrator.

1.0.55

Fixes a minor issue in the loading screen: logo.

1.0.56

Modifies the settings page of the plugin.

1.0.57

Increases the plugin’s security.

1.0.58

Includes a new option in the settings for excluding the loading screen by post types.
Includes new attributes in the troubleshoot area.

1.0.59

Fixes an issue when the loading screen is being displayed or not depending on the screen size.

1.0.60

Fixes an issue with the close loading screen button if have been assigned additional seconds to the loading screen.

1.0.61

Fixes an issue when javascript is disabled on browsers.

1.0.62

Includes a new section to allow disable the loading screen from pages based on their URLs. This allows to disable the loading screen on the ipn scripts, or any other URL used by services in background.

1.0.63

Modifies the access to the demos.

1.0.64

Fixes an issue calculating the loading percentage.

1.0.65

Includes a new option in the plugin’s settings that allows disable the loading screen from Elementor Coming Soon and Maintenance modes.

1.0.66

Fixes an encoding issue in some ampersand symbols on generated URLs.

1.0.67

Improves the admin interface.
Improves the registration process (Professional version).

1.0.68

Modifies the plugins settings, and includes a video tutorial.

1.0.69

Triggers two events from document object: loadingScreenShow, and loadingScreenCompleted, triggered before the loading screen be displayed and after destroyed respectively.

1.0.70

Modifies the way the scripts are enqueued to prevent conflicts with the third-party plugins to manage the website’s cache, and the next version of WordPress.

1.0.71

Modifies the module to limit the loading screen to only once per page.

1.0.72

Improves the accessibility.

1.0.73

Fixes an issue on WordPress multisite.

1.0.74
1.0.75

Displays the loading screen from the onclick link and not only the next page.

1.0.76

Fixes a conflict with third-party themes.

1.0.77

It does the ‘Show loading screen when clicking on link’ attribute optional and disabled by default to prevent conflicts with optimizer and cache plugins.

1.0.78

Modifies the loding screens.

1.0.79

Includes the blink effect in the logo loding screen.

1.0.80

Includes new animations alternatives for the logo screen.

1.0.81

Minifies the public JS and CSS files to optimize the loading process.

1.0.82

Includes a new option in the plugin’s settings to display the loading screen only in specific post types.

1.0.83

The current plugin update fixes a vulnerability in its settings page detected by wpscan.com. The new plugin version sanitizes and escapes every settings attribute.

1.0.84

The plugin update sanitizes all data received from the browser and escapes all information in the output.

1.0.85

Improves the plugin’s security.

1.0.86

Fixes a compatibility minor issue.

1.0.87

Fixes a session issue.

1.0.88

Fixes an issue with some attributes.
Improves the plugin code and security.

1.0.89

Includes a new attribute in the troubleshoots area for controlling the duration of the loading screen on previous pages.

1.0.90

Further optimizes the loading screen scripts.

1.0.91

Implements the exclude loading screen from mobiles.

1.0.92

Modifies the tags accepted by the ads section in loading screens.

1.0.93

Improves the loading screens behavior.

1.0.94

Replaces the attribute to exclude mobile devices with a positive attribute that allows to select the devices to show the loading screen.




Meta


				Version: 1.0.94 

				Last updated: 4 months ago 

				Active installations: 10,000+ 

					WordPress Version:					
						3.0.6 or higher					


					Tested up to: 6.1.1 

					Languages: 
							See all 3						



								Close							

English (US), Persian, and Russian.

Translate into your language 


 
Tags: animationpage performance

Advanced View 

Ratings See all

 



5 stars



96




4 stars



4




3 stars



3




2 stars



3




1 star



7




Log in to submit a review.

Contributors


 
					codepeople				


Support Issues resolved in last two months:





					3 out of 3				


View support forum

Donate
Would you like to support the advancement of this plugin?


					Donate to this plugin				

 






AboutNewsHostingDonateSwag
DocumentationDevelopersGet InvolvedLearn
ShowcasePluginsThemesPatterns
WordCampWordPress.TVBuddyPressbbPress
WordPress.comMattPrivacyPublic Code







WordPress.org


 




WordPress.org



 



Visit our Facebook page
Visit our Twitter account
Visit our Instagram account
Visit our LinkedIn account



























Live Solr Online Training starting on June 19! See all classesSematextSolr / Elasticsearch Experts – Search & Big Data AnalyticsMenuClose
Products Sematext Cloud. All-in-one monitoring solution: Metrics, Logs, User Analysis & Tracing, finally together.Sematext Enterprise. Run Sematext Cloud on your infrastructureProduct UpdatesDocumentationPlans & PricingLogs. Hassle-free Log Management and analyticsInfrastructure Monitoring. Map and monitor your whole infrastructure in real-timeExperience. Improve your customers’ digital experience with Real User MonitoringSynthetic Monitoring. Monitor performance and availability of your site and APIsTracing. Optimize end-to-end application performance
Main CapabilitiesIntegrationsApplication Performance MonitoringLog MonitoringServer MonitoringKubernetes MonitoringContainer MonitoringProcess MonitoringDatabase MonitoringNetwork MonitoringUptime MonitoringWebsite MonitoringAPI MonitoringJVM MonitoringMetrics and LogsInventory MonitoringAlertsEventsAPI
Pricing
Services 
ElasticsearchConsulting24/7 SupportTrainingMonitoringGuide
OpenSearchConsulting24/7 SupportTrainingMonitoring
SolrConsulting24/7 SupportTrainingMonitoringGuide
Use CasesLoggingSearch RelevanceUpcoming Solr and Elasticsearch Online Training Classes See Online Classes
Resources 
DocsMonitoringLogsExperienceSyntheticsTracing
How toeBooksCheat SheetsProduct VideosSlide DecksPublications
Why SematextCase StudiesIndustry Comparisons
BlogReal User MonitoringLoggingMonitoringSynthetic MonitoringSearchSee all posts
GuidesLog Management GuideKubernetes Logging GuideKubernetes Monitoring GuideSynthetic Monitoring GuideElasticsearch GuideDocker Logging GuideSolr GuideReal User MonitoringJava Monitoring GuideELK Stack GuideApplication Performance Monitoring GuideGlossaryDevOps Terms & Definitions
Most Popular


Docker Commands Cheat SheetElasticsearch DevOps Cheat SheetElasticsearch Developer Cheat SheetSolr Cheat SheetKubernetes Cheat SheetDocker Commands Cheat Sheet
About CompanyCustomersCase StudiesPartnersTestimonialsJobsEngineeringContactStatusAwardsSee Live DemoStart Free TrialLogin  GlossaryPage Load Time
core web vitals
frontend
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
ZDefinition: What Is Page Load Time?Page load time is the amount of time it takes for a web page to fully load. Measured in seconds, it’s one of the indicators of a web page’s performance, and a slow one can hurt user engagement and, consequently, business performance.How Is Page Load Time Calculated?Page load time is calculated from the moment you click on a link or type in a website’s address to the moment when all the elements of the page are displayed on the screen. To make this request happen, the browser and the server go through the following cycle:The user sends a server request. This can be clicking on a URL or a link to load a new page, or get a page with a list of products from a simple “table calendar” search from an e-commerce website.The server processes the browser’s request.The browser receives data/information from the server for the requested page. (Note: The time between sending a request to a server and receiving the first byte of data is called the time to first-byte (TTFB). Google uses this metric to measure how fast a website loads.)The page’s content is processed, loaded, and displayed by the browser, and the requested page is fully loaded.Several factors are taken into consideration when measuring the web page load time. Website owners can affect some of these, while others such as the user’s location, device, browser and internet connection are beyond their control, yet still affect the page load time. For example, the same web page can load differently on different browsers (e.g., Firefox, Chrome) and devices (e.g., desktop vs. tablet vs. mobile), and in different locations.Why Is Page Load Time Important?Your business bottom line is significantly influenced by your website’s page load time, as consumers desire speedy, easy-to-navigate websites. Here’s how:SEO and Search Engine Ranking: Google uses web page loading time as a direct ranking factor, influencing a page’s position in the search results. A slow loading page can hurt your site’s SEO by increasing the bounce rate and decreasing the average session time, or by dropping the organic traffic from the search engines.User engagement and customer satisfaction: Slow page load times also affect how users see and interact with your website. Over 70% of customers say that page speed impacts their likelihood to purchase. Consequently, close to half of them are less likely to buy and return to the slow website in the future.Bounce Rate: If your page speed is poor, customers may not wait for it to load and leave instead to search for a faster website. According to Google’s research, the probability of a user leaving a website (bounce rate) increased by 32% when it took 1-3 seconds to load a page, by 90% when it took 1-5 seconds, and by 123% when it took more than 10 seconds to load a page.Business aspects: Keeping page load times low is vital to enhance conversion rates and sales revenue. Every second lost is an opportunity lost. Studies show that 40% of users leave a website that takes longer than 3 seconds to load. Furthermore, for every additional second a website takes to load, a 7% drop in conversion rates may be expected.How Is Page Load Time Different from Response Time?Response time is how quickly a server responds to a request. In contrast, web page load time is the time the webpage takes to load fully.DNS lookup time, socket connection time, HTTP redirect, time to first byte, and time to last byte are typical response time cycle components. In comparison, the page load time includes sending server requests for the various content on the page to load a web page completely.Server response time affects page load time since the server must react to every page request. Slow reaction times raise page load times, whereas rapid ones reduce them.These metrics tell you a lot about how well your page is doing and therefore should be measured and monitored.What Is a Good Page Load Time on a Website?An ideal page load time is between 0-2 seconds, but 3 seconds is also considered to be an acceptable score. Anything above 3 seconds increases the likelihood of visitors leaving your site.What Causes Slow Page Load Time?A variety of factors influence website loading time, including but not limited to: poorly written code, poorly optimized media and external content (such as uncompressed images and videos), an abundance of HTTP requests, ineffective caching, poor hosting, old browsers and more. Unoptimized images and plenty of widgets and plugins are often the common culprits.How to Check Page Load Time?There are various methods you can use to check page load time:Chrome/Firefox browser:
Open the web page you want to inspect in your Chrome/Firefox browser. Right-click and select “Inspect.” Go to the “Network” tab in the pop-up window. As your web page loads, you can see all the information, including the load time.Note: Chrome also has an open-source automated tool called Lighthouse to measure the site’s performance. Click the “>” button and select Lighthouse to get started.Online browser extensions or website speed testing tools: These are online platforms where you can manually check page loading times. You just have to type in the website’s address and you will instantly receive a snapshot of how fast or slow your website is at that particular moment.Synthetic monitoring tools: Unlike the previous solutions, these offer a continuous overview of the website’s various metrics, instead of just intermittent bits. You can set up thresholds for all key website performance metrics, including page load time. The tools then automatically perform regular tests and trigger an alert to notify you whenever something is outside your conditions.How Do You Improve the Average Page Loading Time?There are a few best practices you can apply to optimize website speed. Here are a few examples:Optimize the code: Inefficient code is another reason for website slowness. You may increase your site’s loading speed by reducing the amount of render blocking resources, using tools which minify your code, as well as optimizing the code which renders the various parts of your page.Better hosting: Cheaper ones often don’t perform well, which can slow down the speed of your site.Optimize files and media: Your web pages will load faster if you compress the various files and media which you serve to your users. Also, it’s better to set the image resolution based on the device from which the user is loading the page. Use JPEG for photographs with many colors and PNG for simple graphics.Reduce unnecessary HTTP requests: Browsers utilize HTTP to request files from a web server, such as photos, stylesheets, and scripts, which take additional time to load. For a faster page load time, remove unnecessary pictures, JavaScript scripts, stylesheets, fonts, ads, etc., from the webpage.Reduce plugins: Plugins are reusable bits of functionality that bring features like analytics and blog commenting to websites. Too many can slow down a website. Disable any you don’t use and consolidate overlapping ones. You can run plugins one by one to find the slowest one.Using a Content Delivery Network (CDN): A CDN service is a network of servers located in various geographic areas and used to quickly and efficiently provide data to users accessing a website. The CDN caches data in geographically distributed data centers. They can reduce the round-trip time (RTT) of your content delivery, allowing you to reach more people in less time.Use a cloud-based synthetic monitoring tool: A continuous overview of a website’s performance provides a lot more insight than the intermittent bits of information gathered manually. An example of this would be spotting patterns and trends which cause the website to load slower, such as peak traffic hours. This information could then be used not just to see if problems occur, but also to provide insight as to why, thus serving as a basis for solving potential issues.Interested in actively monitoring your website's performance?Get our free ebook on Website Monitoring today.
Download EBookWeb Load Time Monitoring with SematextSematext Synthetics is one of the aforementioned synthetic monitoring tools which you can use to monitor your web page’s load time. With Synthetics, monitoring page load time, as well as other important metrics such as Web Core Vitals, is as simple as creating a Browser monitor and pasting in the URL which you want to keep an eye on.Since the user’s location and device from which they are accessing the page are also important, this solution gives you the ability to monitor websites from various locations distributed around the globe, as well as simulate which device the page is loaded from.These metrics are automatically charted for you over time to help with analyzing trends and patterns, and comparing the page load times between different locations and devices can help you identify and solve problems before they negatively impact your business.Setting up monitors for your websites takes less than five minutes.There is a 14-day free trial with no credit card information required, for you to try out all the features Sematext has to offer with no risk. Sign up now, and feel free to check the  documentation for more information on the various features we offer.For more information on Sematext Synthetics, check out the video below:Start free trialSee Also

HTTP Requests


Render time


SSL Certificate Expiry
Content
Definition: What Is Page Load Time?
How Is Page Load Time Calculated?
Why Is Page Load Time Important?
How Is Page Load Time Different from Response Time?
What Is a Good Page Load Time on a Website?
What Causes Slow Page Load Time?
How to Check Page Load Time?
How Do You Improve the Average Page Loading Time?
Web Load Time Monitoring with SematextReal User Monitoring GuideLooking into how to improve customers’ digital experience? Download the Complete Real User Monitoring GuideDownload it for FreeStay up to dateGet tips, how-tos, and news about Elastic / ELK Stack, Observability, Solr, and Sematext Cloud news and updates.   




 Production Support Solr, Elasticsearch, OpenSearch, Logging Consulting Advanced TrainingProductsSematext CloudInfrastructure MonitoringLog ManagementReal User MonitoringSynthetic MonitoringAPM / TracingSematext EnterpriseServicesConsultingSupportTrainingAboutCompanyBlogJobsCustomersStatusAwardsContact+1 347-480-1610info@sematext.comBrooklyn, NY USATwitterFacebookGitHubLinkedInYouTube
© Sematext Group. All rights reserved
Terms Of Service · Privacy Policy
Apache Lucene, Apache Solr and their respective logos are trademarks of the Apache Software Foundation.
Elasticsearch, Kibana, Logstash, and Beats are trademarks of Elasticsearch BV, registered in the U.S.
and in other countries. Sematext Group, Inc. is not affiliated with Elasticsearch BV.  Skip to content  Open menu     About  Blog  Learn  Explore  Patterns  Case studies  Close   We want to hear from you! We are looking for web developers to participate in user research, product testing, discussion groups and more. Apply now to join our WebDev Insights Community.On this page Browser compatibilityWhy browser-level lazy loading?The loading attributeRelationship between the loading attribute and fetch priorityDistance-from-viewport thresholdsImproved data-savings and distance-from-viewport thresholdsImages should include dimension attributesAvoid lazy loading images that are in the first visible viewportGraceful degradationFAQAre there plans to automatically lazy-load images in Chrome?Can I change how close an image needs to be before a load is triggered?Can CSS background images take advantage of the loading attribute?Is there a downside to lazy loading images that are within the device viewport?How does the loading attribute work with images that are in the viewport but not immediately visible (for example: behind a carousel, or hidden by CSS for certain screen sizes)?What if I'm already using a third-party library or a script to lazy-load images?How do I handle browsers that don't support lazy loading?Is lazy loading for iframes also supported in Chrome?How does browser-level lazy loading affect advertisements on a web page?How are images handled when a web page is printed?Does Lighthouse recognize browser-level lazy loading?Conclusion  Home  All articles Browser-level image lazy loading for the webBuilt-in lazy loading is finally here!Aug 6, 2019 — Updated Oct 18, 2022 Available in: English, Español, Português, Русский, and 한국어  Appears in: Fast load times   Houssein Djirdeh TwitterGitHubGlitchHomepage   Addy Osmani TwitterGitHub   Mathias Bynens TwitterGitHubHomepage   Barry Pollard TwitterGitHubHomepageOn this page Browser compatibilityWhy browser-level lazy loading?The loading attributeRelationship between the loading attribute and fetch priorityDistance-from-viewport thresholdsImproved data-savings and distance-from-viewport thresholdsImages should include dimension attributesAvoid lazy loading images that are in the first visible viewportGraceful degradationFAQAre there plans to automatically lazy-load images in Chrome?Can I change how close an image needs to be before a load is triggered?Can CSS background images take advantage of the loading attribute?Is there a downside to lazy loading images that are within the device viewport?How does the loading attribute work with images that are in the viewport but not immediately visible (for example: behind a carousel, or hidden by CSS for certain screen sizes)?What if I'm already using a third-party library or a script to lazy-load images?How do I handle browsers that don't support lazy loading?Is lazy loading for iframes also supported in Chrome?How does browser-level lazy loading affect advertisements on a web page?How are images handled when a web page is printed?Does Lighthouse recognize browser-level lazy loading?ConclusionBrowser-level support for lazy loading images is now supported on the web! This video shows a demo of the feature: In Chrome 76 onwards, you can use the loading attribute to lazy-load images without the need to write custom lazy loading code or use a separate JavaScript library. Let's dive into the details.Browser compatibility #Browser support  chrome 77, Supported  77 firefox 75, Supported  75 edge 79, Supported  79 safari 15.4, Supported  15.4 SourceBrowsers that do not support the loading attribute simply ignore it without side effects.Why browser-level lazy loading? #According to HTTPArchive, images are the most requested asset type for most websites and usually take up more bandwidth than any other resource. At the 90th percentile, sites send about 4.7 MB of images on desktop and mobile. That's a lot of cat pictures.Previously, there were two ways to defer the loading of off-screen images:Using the Intersection Observer APIUsing scroll, resize, or orientationchange event handlersEither option can let developers include lazy loading functionality, and many developers have built third-party libraries to provide abstractions that are even easier to use. With lazy loading supported directly by the browser, however, there's no need for an external library. Browser-level lazy loading also ensures that deferred loading of images still works even if JavaScript is disabled on the client.The loading attribute #Chrome loads images at different priorities depending on where they're located with respect to the device viewport. Images below the viewport are loaded with a lower priority, but they're still fetched as soon as possible.You can use the loading attribute to completely defer the loading of offscreen images that can be reached by scrolling:<img src="image.png" loading="lazy" alt="…" width="200" height="200"> Here are the supported values for the loading attribute:lazy: Defer loading of the resource until it reaches a calculated distance from the viewport.eager: Default loading behavior of the browser, which is the same as not including the attribute and means the image is loaded as soon as possible, regardless of where it's located on the page. While this is the default, it can be useful to explicitly set this if your tooling automatically adds loading="lazy" if there is no explicit value, or if your linter complains if it is not explicitly set.CautionImages that are highly likely to be in-viewport, and in particular LCP images, should not be lazy-loaded.Relationship between the loading attribute and fetch priority #The eager value is simply an instruction to load the image as usual, without delaying the load further if it is off-screen. It does not imply that the image is loaded any quicker than another image without the loading="eager" attribute.Browsers prioritize resources based on various heuristics, and the loading attribute just states when the image resource is queued, not how it is prioritized in that queue. eager just implies the usual eager queueing browsers use by default.If you want to increase the fetch priority of an important image (for example the LCP image), then Priority Hints should be used with fetchpriority="high".Note that an image with loading="lazy" and fetchpriority="high" will still be delayed while it is off-screen, and then fetched with a high priority when it is nearly within the viewport. It would likely be fetched with a high priority in this case anyway, so this combination should not really be needed nor used.Distance-from-viewport thresholds #All images that are above the fold—that is, immediately viewable without scrolling—load normally. Those that are far below the device viewport are only fetched when the user scrolls near them.Chromium's implementation of lazy loading tries to ensure that offscreen images are loaded early enough so that they have finished loading once the user scrolls near to them. By fetching nearby images before they become visible in the viewport, we maximize the chance they are already loaded by the time they become visible.Compared to JavaScript lazy loading libraries, the thresholds for fetching images that scroll into view may be considered conservative. Chromium is looking at better aligning these thresholds with developer expectations.Experiments conducted using Chrome on Android suggest that on 4G, 97.5% of below-the-fold images that are lazy-loaded were fully loaded within 10ms of becoming visible. Even on slow 2G networks, 92.6% of below-the-fold images were fully loaded within 10ms. This means browser-level lazy loading offers a stable experience regarding the visibility of elements that are scrolled into view.The distance threshold is not fixed and varies depending on several factors:The type of image resource being fetchedThe effective connection typeYou can find the default values for the different effective connection types in the Chromium source. These numbers, and even the approach of fetching only when a certain distance from the viewport is reached, may change in the near future as the Chrome team improves heuristics to determine when to begin loading.In Chrome 77+, you can experiment with these different thresholds by throttling the network in DevTools. In the meantime, you will need to override the effective connection type of the browser using the about://flags/#force-effective-connection-type flag.Improved data-savings and distance-from-viewport thresholds #As of July 2020, Chrome has made significant improvements to align the image lazy loading distance-from-viewport thresholds to better meet developer expectations.On fast connections (4G), we reduced Chrome's distance-from-viewport thresholds from 3000px to 1250px and on slower connections (3G or lower), changed the threshold from 4000px to 2500px. This change achieves two things:&LTimg loading=lazy> behaves closer to the experience offered by JavaScript lazy loading libraries.The new distance-from-viewport thresholds still allow us to guarantee images have probably loaded by the time a user has scrolled to them.You can find a comparison between the old vs. new distance-from-viewport thresholds for one of our demos on a fast connection (4G) below:Old thresholds. vs new thresholds:and the new thresholds vs. LazySizes (a popular JS lazy loading library):To ensure Chrome users on recent versions also benefit from the new thresholds, we have backported these changes so that Chrome 79 - 85 inclusive also uses them. Keep this in mind if attempting to compare data savings from older versions of Chrome to newer ones.We are committed to working with the web standards community to explore better alignment in how distance-from-viewport thresholds are approached across different browsers.Images should include dimension attributes #While the browser loads an image, it does not immediately know the image's dimensions, unless these are explicitly specified. To enable the browser to reserve sufficient space on a page for images, it is recommended that all &LTimg> tags include both width and height attributes. Without dimensions specified, layout shifts can occur, which are more noticeable on pages that take some time to load.<img src="image.png" loading="lazy" alt="…" width="200" height="200"> Alternatively, specify their values directly in an inline style:<img src="image.png" loading="lazy" alt="…" style="height:200px; width:200px;"> The best practice of setting dimensions applies to &LTimg> tags regardless of whether or not they are being loaded lazily. With lazy loading, this can become more relevant. Setting width and height on images in modern browsers also allows browsers to infer their intrinsic size.In most scenarios images still lazy-load if dimensions are not included, but there are a few edge cases you should be aware of. Without width and height specified, image dimensions are 0×0 pixels at first. If you have a gallery of such images, the browser may conclude that all of them fit inside the viewport at the start, as each takes up practically no space and no image is pushed offscreen. In this case the browser determines that all of them are visible to the user and decides to load everything.Also, specifying image dimensions decreases the chances of layout shifts happening. If you are unable to include dimensions for your images, lazy loading them can be a trade-off between saving network resources and potentially being more at risk of layout shift.While lazy loading in Chromium is implemented in a way such that images are likely to be loaded once they are visible, there is still a small chance that they might not be loaded yet. In this case, missing width and height attributes on such images increase their impact on Cumulative Layout Shift.Take a look at this demo to see how the loading attribute works with 100 pictures.Images that are defined using the &LTpicture> element can also be lazy-loaded:<picture>  <source media="(min-width: 800px)" srcset="large.jpg 1x, larger.jpg 2x">  <img src="photo.jpg" loading="lazy"></picture> Although a browser will decide which image to load from any of the &LTsource> elements, the loading attribute only needs to be included to the fallback &LTimg> element.Avoid lazy loading images that are in the first visible viewport #You should avoid setting loading=lazy for any images that are in the first visible viewport. This is particularly relevant for LCP images. See the article The performance effects of too much lazy-loading for more information.It is recommended to only add loading=lazy to images which are positioned below the fold, if possible. Images that are eagerly loaded can be fetched right away, while images which are loaded lazily the browser currently needs to wait until it knows where the image is positioned on the page, which relies on the IntersectionObserver to be available.Generally, any images within the viewport should be loaded eagerly using the browser's defaults. You do not need to specify loading=eager for this to be the case for in-viewport images.<!-- visible in the viewport --><img src="product-1.jpg" alt="..." width="200" height="200"><img src="product-2.jpg" alt="..." width="200" height="200"><img src="product-3.jpg" alt="..." width="200" height="200"><!-- offscreen images --><img src="product-4.jpg" loading="lazy" alt="..." width="200" height="200"><img src="product-5.jpg" loading="lazy" alt="..." width="200" height="200"><img src="product-6.jpg" loading="lazy" alt="..." width="200" height="200"> Graceful degradation #Browsers that do not yet support the loading attribute will ignore its presence. While these browsers will of course not get the benefits of lazy loading, including the attribute has no negative impact on them.FAQ #Are there plans to automatically lazy-load images in Chrome? #Previously, Chromium automatically lazy-loaded any images that were well suited to being deferred if Lite mode was enabled on Chrome for Android and the loading attribute was either not provided or set as loading="auto". However, Lite mode has been deprecated (as was the non-standard loading="auto") and there are currently no plans to provide automatically lazy-load of images in Chrome.Can I change how close an image needs to be before a load is triggered? #These values are hardcoded and can't be changed through the API. However, they may change in the future as browsers experiment with different threshold distances and variables.Can CSS background images take advantage of the loading attribute? #No, it can currently only be used with &LTimg> tags.Is there a downside to lazy loading images that are within the device viewport? #It is safer to avoid putting loading=lazy on above-the-fold images, as Chrome won't preload loading=lazy images in the preload scanner. See Avoid lazy-loading images that are in the first visible viewport for more information.How does the loading attribute work with images that are in the viewport but not immediately visible (for example: behind a carousel, or hidden by CSS for certain screen sizes)? #Using loading="lazy" may prevent them being loaded when they are not visible but within the calculated -distance. For example, Chrome, Safari and Firefox do not load images using display: none; styling—either on the image element or on a parent element. However, other techniques to hide images—such as using opacity:0 styling—will still result in the images being loaded. Always test your implementation thoroughly to ensure it's acting as intended.What if I'm already using a third-party library or a script to lazy-load images? #With full support of native lazy loading now available in modern browsers, you may wish to reconsider if you still need a third-party library or script to lazy-load images.One reason to continue to use a third-party library along with loading="lazy" is to provide a polyfill for browsers that do not support the attribute, or to have more control over when lazy loading is triggered.How do I handle browsers that don't support lazy loading? #Create a polyfill or use a third-party library to lazy-load images on your site. The loading property can be used to detect if the feature is supported in the browser:if ('loading' in HTMLImageElement.prototype) {  // supported in browser} else {  // fetch polyfill/third-party library} For example, lazysizes is a popular JavaScript lazy loading library. You can detect support for the loading attribute to load lazysizes as a fallback library only when loading isn't supported. This works as follows:Replace &LTimg src> with &LTimg data-src> to avoid an eager load in unsupported browsers. If the loading attribute is supported, swap data-src for src.If loading is not supported, load a fallback (lazysizes) and initiate it. As per lazysizes docs, you use the lazyload class as a way to indicate to lazysizes which images to lazy-load.<!-- Let's load this in-viewport image normally --><img src="hero.jpg" alt="…"><!-- Let's lazy-load the rest of these images --><img data-src="unicorn.jpg" alt="…" loading="lazy" class="lazyload"><img data-src="cats.jpg" alt="…" loading="lazy" class="lazyload"><img data-src="dogs.jpg" alt="…" loading="lazy" class="lazyload"><script>  if ('loading' in HTMLImageElement.prototype) {    const images = document.querySelectorAll('img[loading="lazy"]');    images.forEach(img => {      img.src = img.dataset.src;    });  } else {    // Dynamically import the LazySizes library    const script = document.createElement('script');    script.src =      'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.1.2/lazysizes.min.js';    document.body.appendChild(script);  }</script> Here's a demo of this pattern. Try it out in an older browser to see the fallback in action.The lazysizes library also provides a loading plugin that uses browser-level lazy loading when available but falls back to the library's custom functionality when needed.Is lazy loading for iframes also supported in Chrome? #Browser support  chrome 77, Supported  77 firefox, Not supported  × edge 79, Supported  79 safari, Not supported  × &LTiframe loading=lazy> has also been standardized and is already implemented in Chromium. This allows you to lazy-load iframes using the loading attribute. See this dedicated article about iframe lazy-loading for more information.How does browser-level lazy loading affect advertisements on a web page? #All ads displayed to the user in the form of an image or iframe lazy-load just like any other image or iframe.How are images handled when a web page is printed? #All images and iframes are immediately loaded if the page is printed. See issue #875403 for details.Does Lighthouse recognize browser-level lazy loading? #Earlier versions of Lighthouse would still highlight that pages using loading=lazy on images required a strategy for loading offscreen images. Lighthouse 6.0 and above better factor in approaches for offscreen image lazy loading that may use different thresholds, allowing them to pass the Defer offscreen images audit.Conclusion #Baking in support for lazy loading images can make it significantly easier for you to improve the performance of your web pages.Are you noticing any unusual behavior with this feature enabled in Chrome? File a bug!Performance Last updated: Oct 18, 2022  —  Improve article   Return to all articles   Share   subscribe   We want to help you build beautiful, accessible, fast, and secure websites that work cross-browser, and for all of your users. This site is our home for content to help you on that journey, written by members of the Chrome team, and external experts.Contribute File a bug  View source Related content developer.chrome.com  Chrome updates  Case studies  Podcasts  Shows Connect Twitter  YouTube    Chrome  Firebase  Google Cloud Platform  All products  Dark theme    Terms & Privacy  Community Guidelines Except as otherwise noted, the content of this page is licensed under the  Creative Commons Attribution 4.0 License, and code samples are licensed under the  Apache 2.0 License. For details, see the  Google Developers Site Policies.  By  Chrome DevRel   Skip to main content   Search Console HelpSign inGoogle HelpHelp CenterCommunitySearch ConsolePrivacy PolicyTerms of ServiceSubmit feedback Send feedback on...This help content & informationGeneral Help Center experienceNextHelp CenterCommunitySearch Console        View the rendered source for a pageOverview
When you visit a page, the website sends HTML code to your browser. Often this source code includes additional resources such as scripts, which must be loaded, and which may alter the page code.
Right-clicking "show source" typically shows only the original page code returned to the browser, before scripts and other resources have been loaded and run. But there are many instances, particularly when troubleshooting your page, when you need to see the code of the final, rendered page on the browser, after all resources have been loaded, and any scripts run. For example:

To search for Google Analytics or Google Tag Manager tags used in verification.
To debug page loading and display (that is, to check that all libraries and other resources that you want to be loaded are).
To look at structured data on the served page.

How to view the rendered source
Here are a few methods to view the rendered source code for a web page:

In the Chrome browser: Right-click any part of the page and select Inspect to see all the HTML from the rendered page. Search for items in the rendered HTML with Control + F (Windows) or Command + F (Mac).
For a page on your own site: 
    
Inspect the URL, either by entering the URL directly in the URL Inspection tool, or by clicking an inspection link next to a URL shown in most Search Console reports.
Click Test live URL > View tested page.
The HTML tab shows the rendered HTML for the page.


For a page on any site, not just a site that you own:
    
Open the Mobile-friendly Test.
Enter the URL of the page. The page must be available to Google without a login, and not blocked by robots.txt.
Click View tested page.
The HTML tab shows the rendered HTML for the page.



   Was this helpful?How can we improve it?YesNoSubmit      Need more help? Try these next steps:          Ask the Help Community Get answers from community experts       true    HelpTop tasks for Search Console usersAsk Google to recrawl your URLsManaging properties and users on Search ConsoleChange of Address ToolManage your sitemaps using the Sitemaps reportView the rendered source for a pageUnblock a page blocked by robots.txt           New to Search Console? Never used Search Console before? Start here, whether you're a complete beginner, an SEO expert, or a website developer.           ©2023 Google   Privacy Policy   Terms of Service     dansk‎Deutsch‎español‎français‎Indonesia‎italiano‎magyar‎Nederlands‎polski‎português (Brasil)‎suomi‎svenska‎Tiếng Việt‎Türkçe‎čeština‎русский‎‏עברית‏العربيةहिन्दी‎ไทย‎中文（简体）‎中文（繁體）‎日本語‎한국어‎ English‎         Enable Dark Mode   Send feedback on... This help content & information General Help Center experience       SearchClear searchClose searchGoogle appsMain menu                          Search Help Center  true   true   false        true true 83844                false                             false 